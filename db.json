{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cosplay.jpg","path":"images/cosplay.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/B-Tree.md","hash":"f2fb5d481e0ae9baeb6e9edd0536a98a352419ab","modified":1618927505464},{"_id":"source/_posts/LeetCode刷题日记-K个一组翻转链表.md","hash":"262ef8e7f25e8a67a2b525270958773986832127","modified":1618932754220},{"_id":"source/_posts/LeetCode刷题日记-前K个高频元素.md","hash":"69ab3cbd3292cb9a50847d8f3ff180ae74b1d427","modified":1619541554358},{"_id":"source/_posts/LeetCode刷题日记-柱状图中的最大面积.md","hash":"73a8f7ade7ee54a2ba3ae0643a78a24df65c3182","modified":1619111090821},{"_id":"source/_posts/LeetCode刷题日记-滑动窗口最大值.md","hash":"ae6c8c80ae382fee011964b1559368bb5dd6c7c8","modified":1619457607605},{"_id":"source/_posts/LeetCode刷题日记-盛最多水的容器.md","hash":"c4e20ef0b307e7d47da8f0231696a7f4042f4a89","modified":1620317049386},{"_id":"source/_posts/LeetCode刷题日记-设计循环双端队列.md","hash":"b681464e145e6b4564ecbf34fe518b3f8224908d","modified":1618932286176},{"_id":"source/categories/index.md","hash":"7c6d6bf672baecf75f063e453137a127bcb3068f","modified":1618927324588},{"_id":"source/tags/index.md","hash":"a4ed068807fe967587242327301c137b36becb0b","modified":1618927085226},{"_id":"themes/next/.editorconfig","hash":"731c650ddad6eb0fc7c3d4a91cad1698fe7ad311","modified":1618474440829},{"_id":"themes/next/.eslintrc.json","hash":"d3c11de434171d55d70daadd3914bc33544b74b8","modified":1618474440829},{"_id":"themes/next/.gitattributes","hash":"3e00e1fb043438cd820d94ee3dc9ffb6718996f3","modified":1618474440829},{"_id":"themes/next/.gitignore","hash":"83418530da80e6a78501e1d62a89c3bf5cbaec3d","modified":1618474440834},{"_id":"themes/next/.travis.yml","hash":"379f31a140ce41e441442add6f673bf397d863ea","modified":1618474440835},{"_id":"themes/next/crowdin.yml","hash":"4a53f5985e545c635cb56b2a57ed290cb8cf8942","modified":1618474440837},{"_id":"themes/next/_config.yml","hash":"af62efe7c6bfec04f32841aa228492acd810ba25","modified":1618505746551},{"_id":"themes/next/README.md","hash":"7d56751b580d042559b2acf904fca4b42bcb30a7","modified":1618474440836},{"_id":"themes/next/package.json","hash":"b099e7cea4406e209130410d13de87988ba37b2a","modified":1618474440876},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"778b7e052993ed59f21ed266ba7119ee2e5253fb","modified":1618474440830},{"_id":"themes/next/gulpfile.js","hash":"0c76a1ac610ee8cbe8e2cc9cca1c925ffd0edf98","modified":1618474440845},{"_id":"themes/next/LICENSE.md","hash":"0a9c7399f102b4eb0a6950dd31264be421557c7d","modified":1618474440835},{"_id":"themes/next/.stylintrc","hash":"6259e2a0b65d46865ab89564b88fc67638668295","modified":1618474440835},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"d2f8e6b65783e31787feb05d2ccea86151f53f35","modified":1618474440832},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"533fbe6b2f87d7e7ec6949063bb7ea7eb4fbe52d","modified":1618474440833},{"_id":"themes/next/.github/config.yml","hash":"df3d970700e6b409edc3d23be8d553db78d5ba3f","modified":1618474440832},{"_id":"themes/next/.github/mergeable.yml","hash":"1c1cb77a62df1e3654b151c2da34b4a10d351170","modified":1618474440833},{"_id":"themes/next/.github/issue-close-app.yml","hash":"b14756e65546eb9ecc9d4393f0c9a84a3dac1824","modified":1618474440832},{"_id":"themes/next/.github/lock.yml","hash":"3ce3d0a26030a1cd52b273cc6a6d444d7c8d85c2","modified":1618474440833},{"_id":"themes/next/.github/release-drafter.yml","hash":"09c3352b2d643acdc6839601ceb38abc38ab97c5","modified":1618474440834},{"_id":"themes/next/.github/stale.yml","hash":"590b65aca710e0fba75d3cf5361a64d13b6b0f63","modified":1618474440834},{"_id":"themes/next/.github/support.yml","hash":"7ce2722d6904c31a086444c422dc49b6aa310651","modified":1618474440834},{"_id":"themes/next/docs/AGPL3.md","hash":"f463f95b169d64983f59fa6f3e4b6760290a0e6b","modified":1618474440837},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"60c7e9ef0c578deebad43e9395c958fa61096baf","modified":1618474440838},{"_id":"themes/next/docs/AUTHORS.md","hash":"cde7cc095ac31b421a573042cf61060f90d9ad0d","modified":1618474440838},{"_id":"themes/next/docs/INSTALLATION.md","hash":"07ea00bee149a1bdc9073e903ee6b411e9f2f818","modified":1618474440838},{"_id":"themes/next/docs/DATA-FILES.md","hash":"980fb8d37701f7fd96b30bb911519de3bbb473d1","modified":1618474440838},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"6cc663db5e99fd86bb993c10d446ad26ada88e58","modified":1618474440839},{"_id":"themes/next/docs/LICENSE.txt","hash":"ae5ad07e4f4106bad55535dba042221539e6c7f9","modified":1618474440839},{"_id":"themes/next/languages/ar.yml","hash":"abcf220bd615cec0dd50e4d98da56580169d77e1","modified":1618474440845},{"_id":"themes/next/languages/de.yml","hash":"15078b7ede1b084e8a6a15d271f0db9c325bd698","modified":1618474440846},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1618474440846},{"_id":"themes/next/docs/MATH.md","hash":"f56946053ade0915ff7efa74d43c38b8dd9e63bb","modified":1618474440840},{"_id":"themes/next/languages/en.yml","hash":"dbb64776f9c001c54d0058256c415a9a0724ed5d","modified":1618474440846},{"_id":"themes/next/languages/es.yml","hash":"f064c793d56a5e0f20cda93b6f0e355044efc7d8","modified":1618474440847},{"_id":"themes/next/languages/fa.yml","hash":"6c0a7d5bcc26eb45a9f3e02f13117c668e77fffd","modified":1618474440847},{"_id":"themes/next/languages/fr.yml","hash":"3e2f89d4bb4441d33ecc7b5a4ee114f627603391","modified":1618474440847},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"1e86d32063b490d204baa9d45d8d3cb22c24a37d","modified":1618474440840},{"_id":"themes/next/languages/id.yml","hash":"7599bb0ecf278beb8fde3d17bfc148a3241aef82","modified":1618474440848},{"_id":"themes/next/languages/hu.yml","hash":"0ea89ffaefd02a10494995f05a2a59d5e5679a28","modified":1618474440848},{"_id":"themes/next/languages/it.yml","hash":"46222f468e66789e9ba13095809eb5e5b63edf30","modified":1618474440848},{"_id":"themes/next/languages/ja.yml","hash":"bf279d0eb1911806d01a12f27261fbc76a3bb3f9","modified":1618474440848},{"_id":"themes/next/languages/ko.yml","hash":"af4be6cb394abd4e2e9a728418897d2ed4cc5315","modified":1618474440849},{"_id":"themes/next/languages/pt-BR.yml","hash":"69aa3bef5710b61dc9a0f3b3a8f52f88c4d08c00","modified":1618474440849},{"_id":"themes/next/languages/nl.yml","hash":"9749cf90b250e631dd550a4f32ada3bb20f66dd0","modified":1618474440849},{"_id":"themes/next/languages/pt.yml","hash":"f6606dd0b916a465c233f24bd9a70adce34dc8d6","modified":1618474440850},{"_id":"themes/next/languages/ru.yml","hash":"012abc694cf9de281a0610f95f79c594f0a16562","modified":1618474440850},{"_id":"themes/next/languages/tr.yml","hash":"46e09f2119cbfbcf93fb8dbd267dccabeb8b0cda","modified":1618474440850},{"_id":"themes/next/languages/uk.yml","hash":"69ef00b1b8225920fcefff6a6b6f2f3aad00b4ce","modified":1618474440851},{"_id":"themes/next/languages/vi.yml","hash":"6a578cc28773bd764f4418110500478f185d6efa","modified":1618474440851},{"_id":"themes/next/languages/zh-CN.yml","hash":"81d73e21402dad729053a3041390435f43136a68","modified":1618474440851},{"_id":"themes/next/languages/zh-HK.yml","hash":"92ccee40c234626bf0142152949811ebe39fcef2","modified":1618474440852},{"_id":"themes/next/languages/zh-TW.yml","hash":"cf0740648725983fb88409d6501876f8b79db41d","modified":1618474440852},{"_id":"themes/next/layout/_layout.swig","hash":"9554bd0f5c5a0438aa7b64065be5561c374d260e","modified":1618474440852},{"_id":"themes/next/layout/category.swig","hash":"c546b017a956faaa5f5643c7c8a363af7ac9d6b9","modified":1618474440875},{"_id":"themes/next/layout/index.swig","hash":"8dfd96fb6f833dd5d037de800813105654e8e8e6","modified":1618474440875},{"_id":"themes/next/layout/page.swig","hash":"357d916694d4c9a0fd1140fa56d3d17e067d8b52","modified":1618474440875},{"_id":"themes/next/layout/post.swig","hash":"5f0b5ba2e0a5b763be5e7e96611865e33bba24d7","modified":1618474440876},{"_id":"themes/next/layout/tag.swig","hash":"d44ff8755727f6532e86fc9fc8dc631200ffe161","modified":1618474440876},{"_id":"themes/next/layout/archive.swig","hash":"d9bca77f6dcfef71e300a294f731bead11ce199f","modified":1618474440874},{"_id":"themes/next/scripts/renderer.js","hash":"e3658eea97b1183ee2e9f676231e53f7994741f6","modified":1618474440884},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"6beeca0f45a429cd932b6e648617f548ff64c27c","modified":1618474440831},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"e67146befddec3a0dc47dc80d1109070c71d5d04","modified":1618474440830},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"59275aa0582f793fee7be67904dcf52ad33a7181","modified":1618474440831},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"54e6a067ed95268eab6be2ba040a7e9b1907928e","modified":1618474440840},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"a9cfe5ac9ef727a8650b2b6584482751a26b1460","modified":1618474440841},{"_id":"themes/next/docs/ru/README.md","hash":"1e5ddb26ad6f931f8c06ce2120f257ff38b74fdf","modified":1618474440841},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"3202be9a8d31986caac640e7a4c7ce22e99917eb","modified":1618474440842},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"cb8e39c377fc4a14aaf133b4d1338a48560e9e65","modified":1618474440841},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"611f2930c2b281b80543531b1bf33d082531456a","modified":1618474440843},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"2d868cd271d78b08775e28c5b976de8836da4455","modified":1618474440843},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"7e6f227f2aaf30f400d4c065650a4e3d0d61b9e1","modified":1618474440842},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"716111dd36d276f463c707dfcc9937fea2a1cf7a","modified":1618474440843},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"50ab381c27611d5bf97bb3907b5ca9998f28187d","modified":1618474440844},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"0d46f9f50cf2e4183970adce705d1041155b0d37","modified":1618474440844},{"_id":"themes/next/docs/zh-CN/README.md","hash":"8f7c0d0b766024152591d4ccfac715c8e18b37f3","modified":1618474440844},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"30ade8c806d7826cc50a4a3e46a9e6213fddf333","modified":1618474440853},{"_id":"themes/next/layout/_macro/post.swig","hash":"c3fd56bac90ce45a0c79ddfe68beb223ad0d72b4","modified":1618474440853},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"5bffdb1448caca7db7b1f84e1693e6657a106d50","modified":1618474440853},{"_id":"themes/next/layout/_partials/comments.swig","hash":"142efb4c6b73d8f736f6784804b40d5871333172","modified":1618474440854},{"_id":"themes/next/layout/_partials/languages.swig","hash":"c3ea82604a5853fb44c5f4e4663cbe912aa5dcf8","modified":1618474440857},{"_id":"themes/next/layout/_partials/footer.swig","hash":"31210b1ac5e8e95c45a5bd605ad84053d032310a","modified":1618845913020},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"2de77d533c91532a8a4052000244d0c1693370df","modified":1618474440858},{"_id":"themes/next/layout/_scripts/index.swig","hash":"1822eaf55bbb4bec88871c324fc18ad95580ccb4","modified":1618474440862},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"5392dcbb504266f0f61d5b8219914068ef9cdc25","modified":1618474440861},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"7b9e0f776a5be6c3f95bc7f394e1424ba02ba93b","modified":1618474440862},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"ccff5a773644d33ff22f6b45b6734f52b048f22b","modified":1618474440863},{"_id":"themes/next/layout/_scripts/three.swig","hash":"6b092c6d882b2dfa5273e1b3f60b244cb7c29fcd","modified":1618474440864},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"244ca2d74ee0d497c87572c6a26b43c62a952673","modified":1618474440865},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"28b0a7e843ec4365db1963646659a153753cd746","modified":1618474440867},{"_id":"themes/next/layout/_third-party/index.swig","hash":"c6b63cbc80938e6e09578b8c67e01adf13a9e3bd","modified":1618474440869},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"5ae5adcd6f63ed98b2071e4f7e5e38c4d7d24e1b","modified":1618474440870},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"269102fc5e46bd1ce75abdcce161f0570ae70e2f","modified":1618474440871},{"_id":"themes/next/scripts/events/index.js","hash":"5c355f10fe8c948a7f7cd28bd8120adb7595ebde","modified":1618474440877},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"ad321db012cea520066deb0639335e9bc0dcc343","modified":1618474440881},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"305d03c1e45782988809298c3e3b3c5d5ee438aa","modified":1618474440881},{"_id":"themes/next/scripts/filters/locals.js","hash":"a5e7d05d3bd2ae6dcffad5a8ea0f72c6e55dbd02","modified":1618474440882},{"_id":"themes/next/scripts/filters/minify.js","hash":"21196a48cb127bf476ce598f25f24e8a53ef50c2","modified":1618474440882},{"_id":"themes/next/scripts/filters/post.js","hash":"57f2d817578dd97e206942604365e936a49854de","modified":1618474440882},{"_id":"themes/next/scripts/helpers/font.js","hash":"8fb1c0fc745df28e20b96222974402aab6d13a79","modified":1618474440883},{"_id":"themes/next/scripts/helpers/engine.js","hash":"eb6b8bbc1dce4846cd5e0fac0452dbff56d07b5d","modified":1618474440883},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"b8d7ddfa4baa9b8d6b9066a634aa81c6243beec9","modified":1618474440883},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"4044129368d0e2811859a9661cad8ab47118bc32","modified":1618474440883},{"_id":"themes/next/scripts/tags/button.js","hash":"bb0e8abbc0a6d5b3a1a75a23976f2ac3075aab31","modified":1618474440884},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"840536754121e0da5968f5ad235f29200fc5d769","modified":1618474440884},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"e2d0184bc4a557e1017395b80ff46880078d8537","modified":1618474440885},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"93ccd3f99d3cb42674f29183c756df63acb5d7f8","modified":1618474440885},{"_id":"themes/next/scripts/tags/label.js","hash":"fc83f4e1be2c34e81cb79938f4f99973eba1ea60","modified":1618474440885},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"81134494ff0134c0dae1b3815caf6606fccd4e46","modified":1618474440886},{"_id":"themes/next/scripts/tags/note.js","hash":"1fdf4f95810fdb983bfd5ad4c4f13fedd4ea2f8d","modified":1618474440886},{"_id":"themes/next/scripts/tags/pdf.js","hash":"37b53661ad00a01a2ca7d2e4a5ad3a926073f8e2","modified":1618474440886},{"_id":"themes/next/scripts/tags/tabs.js","hash":"c70a4a66fd0c28c98ccb6c5d5f398972e5574d28","modified":1618474440887},{"_id":"themes/next/scripts/tags/video.js","hash":"944293fec96e568d9b09bc1280d5dbc9ee1bbd17","modified":1618474440887},{"_id":"themes/next/source/css/_colors.styl","hash":"11aef31a8e76f0f332a274a8bfd4537b73d4f88f","modified":1618474440887},{"_id":"themes/next/source/css/_mixins.styl","hash":"072a3fa473c19b20ccd7536a656cda044dbdae0a","modified":1618474440909},{"_id":"themes/next/source/css/main.styl","hash":"815ef30987d02f3d76dbe4b5ee3a72135a152678","modified":1618474440917},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"b3201934b966bc731eaf8a4dad4ba4bdcd300c10","modified":1618474440845},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"d5aa1a3323639a36bcd9a401484b67537043cd3c","modified":1618474440831},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1618474440918},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ddde54fb50d11dc08cec899a3588addb56aa386","modified":1618474440830},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1618474440919},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1618474440920},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1618474440919},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1618474440920},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1618474440920},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1618474440921},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1618474440918},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1618474440921},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1618474440921},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1618474440921},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1618474440922},{"_id":"themes/next/source/js/algolia-search.js","hash":"6a813410e33824d7acc65a369a2983912bb3420c","modified":1618474440922},{"_id":"themes/next/source/js/bookmark.js","hash":"9f05fd3672789311dc0cf5b37e40dc654cb04a2a","modified":1618474440923},{"_id":"themes/next/source/js/motion.js","hash":"d5aa1a08cdf3c8d1d8d550fb1801274cc41e5874","modified":1618474440923},{"_id":"themes/next/source/js/next-boot.js","hash":"250d8dcd6322e69e3fbadd0f3e37081c97b47c52","modified":1618474440924},{"_id":"themes/next/source/js/utils.js","hash":"26a82e46fdcadc7c3c2c56a7267284b61a26f7f3","modified":1618474440925},{"_id":"themes/next/source/js/local-search.js","hash":"cfa6a0f3f9c2bc759ee507668a21f4e8f250f42a","modified":1618474440923},{"_id":"themes/next/source/lib/anime.min.js","hash":"960be51132134acd65c2017cc8a5d69cb419a0cd","modified":1618474440925},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"7d638e413f2548fc990c4a467dd03de6c81fc960","modified":1618474440855},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"90cce9f407e9490756ba99580e3eb09f55b05eaa","modified":1618474440855},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"91056a6c98cca63ff8cc6956e531ee3faf4b8ad9","modified":1618474440855},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"0dd316f153c492c0a03bd0273d50fa322bc81f11","modified":1618474440856},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"4baa86ca631168fc6388d27f4b1b501b40c877a8","modified":1618474440856},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"90d3eaba6fbe69bee465ddd67c467fd2c0239dc4","modified":1618474440856},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"bed6cc2b48cf2655036ba39c9bae73a295228a4d","modified":1618474440857},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"91c0addb33006619faa4c32e5d66874e25f1e9b3","modified":1618474440857},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"8d4e3dd0d3631ce0b21bc15c259f6ac886de631d","modified":1618474440858},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"f2eb455c8bf13533427254f0c9b4b17b2498168b","modified":1618474440859},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"d8f785c062c6b0763a778bd4a252e6f5fee0e432","modified":1618474440859},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"ce712c110b5ce8aacba7a86b0558ff89700675c9","modified":1618474440859},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"bc7b047a6246df07767373644b1637d91c3a88b1","modified":1618474440859},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"f349a226e5370075bb6924e60da8b0170c7cfcc1","modified":1618474440860},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"98fd1f5df044f4534e1d4ca9ab092ba5761739a9","modified":1618474440860},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"a6c761d5193cb6f22e9422dbbcf209e05471b0ed","modified":1618474440860},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"128f7d679bb4d53b29203d598d217f029a66dee7","modified":1618474440861},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"7b2ef5db9615267a24b884388925de1e9b447c1f","modified":1618474440861},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"34c05e9d73b0f081db70990c296b6d6a0f8ea2ca","modified":1618474440863},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"34495d408e8467555afee489500b8aad98c52079","modified":1618474440863},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"0b44f400ec00d2b5add5ee96c11d22465c432376","modified":1618474440864},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"0b44f400ec00d2b5add5ee96c11d22465c432376","modified":1618474440864},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"34495d408e8467555afee489500b8aad98c52079","modified":1618474440864},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"84adaadd83ce447fa9da2cff19006334c9fcbff9","modified":1618474440866},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b8819bd056f8a580c5556d4415836a906ed5d7a4","modified":1618474440866},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"91c2cb900c76224c5814eeb842d1d5f517f9bf05","modified":1618474440866},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"85b60e222712ca3b2c4dc2039de2dc36b8d82940","modified":1618474440866},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"2642e8aef5afbe23a2a76efdc955dab2ee04ed48","modified":1618474440867},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"fb94ee487d75e484e59b7fba96e989f699ff8a83","modified":1618474440867},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"a42f97eda3748583bac2253c47fe5dfa54f07b8f","modified":1618474440868},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"9298e6d6c4a62a0862fc0f4060ed99779d7b68cb","modified":1618474440867},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"1b29b99fa921f12c25d3dc95facdf84ef7bb1b5c","modified":1618474440868},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"606ad14a29320157df9b8f33738282c51bb393d9","modified":1618474440868},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"3d91899ca079e84d95087b882526d291e6f53918","modified":1618474440868},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"ae2707d6e47582bb470c075649ec7bad86a6d5a9","modified":1618474440869},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"59df21fcfe9d0ada8cee3188cb1075529c1c3eb8","modified":1618474440869},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"276f523e414d4aa7f350a8f2fd3df8a3d8ea9656","modified":1618474440870},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"1f34b2d3c753a3589ab6c462880bd4eb7df09914","modified":1618474440870},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"fd726aad77a57b288f07d6998ec29291c67c7cbb","modified":1618474440871},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"58296a5c1883f26464c2a5ccf734c19f5fbf395a","modified":1618474440871},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"aa6ab95b8b76611694613defb4bf25003d1b927f","modified":1618474440872},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"d2f0e4c598410ec33785abe302c7ea7492bb791a","modified":1618474440872},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"01d94354d07e72cad47100482068b6be69fcc033","modified":1618474440873},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"53a0760c75d5aaabb3ce8e8aa8e003510d59807f","modified":1618474440872},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"964cd6bac668cf6d211a2624fbef3948cfdece55","modified":1618474440873},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"c171ea94e9afbba97f06856904264da331559463","modified":1618474440873},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"619338ddacf01e3df812e66a997e778f672f4726","modified":1618474440874},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"5a223b60406cee7438cfe3a5e41d1284425aa7a5","modified":1618474440874},{"_id":"themes/next/scripts/events/lib/config.js","hash":"aefe3b38a22bc155d485e39187f23e4f2ee5680a","modified":1618474440877},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"08496b71c9939718e7955704d219e44d7109247b","modified":1618474440878},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"e73f697bb160b223fdde783237148be5f41c1d78","modified":1618474440878},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"2f22f48f7370470cef78561a47c2a47c78035385","modified":1618474440879},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"713056d33dbcd8e9748205c5680b456c21174f4e","modified":1618474440879},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"0c3bea89d64bc12c1bbe6f208a83773c6fb5375a","modified":1618474440879},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"3a80559df0b670ccb065ea9d3bb587d0b61be3a4","modified":1618474440879},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"67cf90d9a2428c14eb113a64bdd213c22a019aef","modified":1618474440880},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"323a47df6ded894944a2647db44556d6163e67c4","modified":1618474440880},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"851359f5ff90f733a9bd7fe677edbee8b8ac714c","modified":1618474440881},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"a4f3153ac76a7ffdf6cc70f52f1b2cc218ed393e","modified":1618474440880},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"5980abbbbeacd8541121f436fa414d24ad5e97c2","modified":1618474440916},{"_id":"themes/next/source/css/_variables/base.styl","hash":"ad680efdfb2f86546182bf3f59886efbcf3c1b2d","modified":1618474440917},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"583ff1e7a2ca889f1f54eb0ca793894466823c7c","modified":1618474440916},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"c22b58af3327236ec54d5706501aa5a20e15012e","modified":1618474440916},{"_id":"themes/next/source/js/schemes/muse.js","hash":"a18559a9c332199efad0100cf84bb0c23fc0f17a","modified":1618474440924},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4e33774b1fe6d0a51f3a428c54c5e600e83bf154","modified":1618474440917},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1618474440928},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1618474440929},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"510a6f0ba7485dd54ce347cca890ab52c4957081","modified":1618474440888},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"0534b329d279a6f255112b3305ff92c810f31724","modified":1618474440888},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"b85a6e2af1387fe64b51e7cd3e2da8616e6f5a3f","modified":1618474440924},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"d17236df3b4d6def1e4e81133ef4729c390de3ac","modified":1618474440889},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"c52648a7b09f9fe37858f5694fcc1ffc709ad147","modified":1618474440895},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"7a95c27762e1303bf06ee808c63f616cb192fcaf","modified":1618474440900},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"e342b8f8e11a3a6aa5a029912c9778c25bf5d135","modified":1618474440910},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5540c9259cb7895a5f10a289c7937e5470a7c134","modified":1618474440903},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"45f4badac6ec45cf24355f6157aece1d4d3f1134","modified":1618474440904},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"4b068d0d898f4e624937503f0e1428993050bd65","modified":1618474440904},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"6d740699fb6a7640647a8fd77c4ea4992d8d6437","modified":1618474440906},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"b619f39e18398422e0ac4999d8f042a5eaebe9cd","modified":1618474440906},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"f317d2e3886e94f5fbb8781c2e68edd19669ff58","modified":1618474440907},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"43045d115f8fe95732c446aa45bf1c97609ff2a5","modified":1618474440906},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"20e0e3e3eba384930c022e21511214d244b4c9e7","modified":1618474440909},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"12b265f82840f27112ca2b1be497677f20f87545","modified":1618474440911},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"b9e87d32da24264bda247c1526afe140c858b0ef","modified":1618474440911},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"716e8b0f056bf6393e6bc6969ac84598ab8e7a6f","modified":1618474440911},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"c5142739e01e9f25c8b32b2209af85c787bb2b42","modified":1618474440912},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"e1c29b81a32273a0dedd926cda199a71aea72624","modified":1618474440911},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"8674bd88df076a1dfe4023ed6750ded1f5b00223","modified":1618474440912},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"49c76bc723d3952abb613d9d68398ed7305da999","modified":1618474440912},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1618474440918},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"9898323ee5a7ac2a5d4f633c653112280beb2643","modified":1618474440913},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1618474440914},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"2d3e05015796a790abd9d68957a5c698c0c9f9b6","modified":1618474440913},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"558794fced306339b98dc2b0ee7f0576802f1355","modified":1618474440914},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"0a9f0d9eb042595502d200fb8c65efb0e6c89aa9","modified":1618474440915},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5de34e1d8a290751641ae456c942410852d5e809","modified":1618474440914},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"b69ac38b9da8c9c1b7de696fdeea7f9d7705213a","modified":1618474440915},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4b7f057dbb53efd7cbe7eac7835a793ab3cbb135","modified":1618474440913},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1618474440915},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"82e34d28f8a1169b20b60101d5bb0446deba3514","modified":1618474440926},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1618474440927},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"18edddb2ffb3f85a68e4367f81e06c461e07bc25","modified":1618474440889},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"236a039b0900f4267de566b46f62314ad967d30f","modified":1618474440889},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"6cf78a379bb656cc0abb4ab80fcae60152ce41ad","modified":1618474440890},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"f6f05f02d50f742c84ee5122016c0563a8bb2cf9","modified":1618474440890},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"97974c231b4659b8aa5e9321c4d54db5c816d0db","modified":1618474440890},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"a52f8cae599099231866298ed831fdf76c9b6717","modified":1618474440891},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"9af620eba5ccceea21a0e3bc69f6f1fa7637c2f3","modified":1618474440891},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"70b3eb9d36543ab92796ac163544e9cf51b7c1e6","modified":1618474440891},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"97dec98d0403097d66822f1c90b50b2890c84698","modified":1618474440891},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"a2ee16cac29a82cfce26804c160286fcbee94161","modified":1618474440899},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"dc9318992ce2eb086ebaa2fe56b325e56d24098b","modified":1618474440915},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"0dfb97703a519d9438f64f9e41ab1dd37381f733","modified":1618474440892},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"2c24829d95c742eb9e8316ebf2fbe9f2c168b59a","modified":1618474440893},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"93ba8172c0d2c37d738e6dbd44fcd5a2e23b92f3","modified":1618474440893},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"09dda2667628d1f91b2e37d8fc6df1413f961b64","modified":1618474440893},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"66fc406796b6efe6cea76550573b7a632112406a","modified":1618474440893},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5cc9e7394c927065c688cba5edd6e0a27587f1d8","modified":1618474440894},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"fcd64c23d17775b3635325f6758b648d932e79b5","modified":1618474440894},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"b266d2ce5e2b117be01537889e839a69004dc0bb","modified":1618474440894},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"b87f4a06c0db893df4f756f24be182e1a4751f24","modified":1618474440895},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"d83102771df652769e51ddfd041cf5f4ca1a041d","modified":1618474440895},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1f6b0d3ab227697ca115e57fd61122ea7950e19d","modified":1618474440896},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"8ed7a9d5dfac592de703421b543978095129aa5b","modified":1618474440896},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"7eeb22c5696f8e0c95161dc57703973cf81c8c12","modified":1618474440897},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"b4f4bae437d4f994af93cf142494ffcd86bae46b","modified":1618474440897},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"300058ca12e81013e77ba01fe66ac210525768b6","modified":1618474440898},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"57b9a179675f1536e017cba457b6ac575e397c4f","modified":1618474440892},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"6d5f26646e2914474f295de8bf6dc327d4acd529","modified":1618474440898},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"7a3a56b10ab714c0e2ed240d0939deeecdcad167","modified":1618474440898},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"3d16ac0f4ccaeed868c246d4d49bde543d1f62cb","modified":1618474440899},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"bad99f4cccb93b3cefe990a2c85124e60698d32e","modified":1618474440896},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b8c816fba0a9b4a35fbae03ba5b1b2da96ba2687","modified":1618474440899},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"357f825f0a649b2e28cba1481d4c9a0cb402e43a","modified":1618474440900},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"49722d555a2edb18094bb2cb3d7336dd72051b93","modified":1618474440900},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"096f908c08ce553e482aadfd3e767a0145191093","modified":1618474440901},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"12f7eaf6b56624cbc411528562d6bb848ff97039","modified":1618474440901},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"525242ce9e912c4adfe5134347c67dbdb9e98e3d","modified":1618474440901},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"b31c86d1a4f89837f9187bed646bda96b2cd286c","modified":1618474440898},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"b11b04737a1a0fea3bd9f0081d96ee6c015358d4","modified":1618474440902},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"fa0a2ea57b7b4ce75b5d18c264af2d92ea3192f9","modified":1618474440902},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"098b4bdf49c7300490f959386d5d1185a32543f6","modified":1618474440902},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"5d540f683018745a5ed1d6f635df28ea610c1244","modified":1618474440903},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"67a1fcb33535122d41acd24f1f49cf02c89b88fa","modified":1618474440903},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"83bd737f663a8461e66985af8ddbfc0a731fc939","modified":1618474440905},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"80488259271bcfe38031f4c2e902463daba9336b","modified":1618474440905},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"c911045b2ce9a66e38d9dd30c7ed078abbc10cbf","modified":1618474440905},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"ceacfa6218f6084c71a230b086e5d2708d29927e","modified":1618474440907},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"8b7aafb911850c73074cdb6cc87abe4ac8c12e99","modified":1618474440908},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"aca7bb220fc14ef2a8f96282d2a95a96a9238d46","modified":1618474440907},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"adaf0f580fccf4158169eeaf534a18005b39a760","modified":1618474440908},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"03a5bcecc0b12231462ef6ffe432fa77ee71beff","modified":1618474440908},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"3256e39f281f06751a1c0145d9806a0e56d68170","modified":1618474440908},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"51d46fa3c7c6b691c61a2c2b0ac005c97cfbf72b","modified":1618474440909},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"4079e616fbf36112dec0674c1e0713d1d9769068","modified":1618474440904},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1618474440928},{"_id":"themes/next/source/images/cosplay.jpg","hash":"f9f7877f2bf1e9b915ec8d0f1133e3ef5dc22d67","modified":1506702520105},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1618474440927},{"_id":"source/_posts/LeetCode刷题日记-K个一组翻转链表/revcure.jpg","hash":"a0b93ce869521b77a34f583b31c28a2b47fcf182","modified":1618849792614},{"_id":"source/_posts/LeetCode刷题日记-K个一组翻转链表/foreach.jpg","hash":"d6bb09434700a998d9b33bb476fc9bb3673e0270","modified":1618851705145},{"_id":"public/categories/index.html","hash":"ac608a64b49a3eccf73b665166619d5b66f8b98b","modified":1620317166054},{"_id":"public/tags/index.html","hash":"a51bf0955989dd64b2b294ffd4905891d139597a","modified":1620317166054},{"_id":"public/2021/04/16/B-Tree/index.html","hash":"d14e8089d5a798e332509f737184937a2b87db37","modified":1620317166054},{"_id":"public/archives/index.html","hash":"61a5966dfe34d6b4368e8659486a24d241eac662","modified":1620317166054},{"_id":"public/archives/2021/index.html","hash":"f88ea0a409a7002295fd12ad01050983be829340","modified":1620317166054},{"_id":"public/archives/2021/04/index.html","hash":"84d318c80cbba18f0eac3304ac48f96af793aec6","modified":1620317166054},{"_id":"public/archives/2021/05/index.html","hash":"f5ef2902979cd0072a2a3ff957f68af0eb882951","modified":1620317166054},{"_id":"public/categories/树/index.html","hash":"63fd9156a6e8ce9ac78f9b5db47e02d9d707e83a","modified":1620317166054},{"_id":"public/categories/链表/index.html","hash":"c57c996faecde3b0bac84e9dcd9e9e4e1f9c2399","modified":1620317166054},{"_id":"public/categories/队列/index.html","hash":"6f85d8d65424cc111dc7b05dea42477e9297c080","modified":1620317166054},{"_id":"public/tags/B-树/index.html","hash":"d83723906aac030b835e159412a460af86d1ae0f","modified":1620317166054},{"_id":"public/tags/LeetCode/index.html","hash":"632a40f6652b74efb7311a763ed983d1c71690bb","modified":1620317166054},{"_id":"public/tags/日记/index.html","hash":"ac986a0e3fa33c9225ab177fb59079f6cae4224d","modified":1620317166054},{"_id":"public/tags/链表/index.html","hash":"f282b100cf3af44e2f80f70f1f3c1207c2f7d80c","modified":1620317166054},{"_id":"public/tags/堆/index.html","hash":"52dfa117f614fa6fa64d209bc3de7745a57f04bd","modified":1620317166054},{"_id":"public/tags/哈希表/index.html","hash":"192387f0726f62f8b64112c18b844cc1e5dd7d27","modified":1620317166054},{"_id":"public/tags/排序/index.html","hash":"2dc9bd91fef0d735b059388442500bf455476946","modified":1620317166054},{"_id":"public/tags/桶/index.html","hash":"2ee36bfc351b67bde3e7af620a52533d34425e52","modified":1620317166054},{"_id":"public/tags/栈/index.html","hash":"3e9304eaaadef6a69772fcc0c396966e0ee1bf7b","modified":1620317166054},{"_id":"public/tags/队列/index.html","hash":"5ac645acd2517840b0cad7ab762a40b66169eeb3","modified":1620317166054},{"_id":"public/tags/双端队列/index.html","hash":"60e841f03293ab5ea8ad708d62aa1982e878476c","modified":1620317166054},{"_id":"public/tags/数组/index.html","hash":"099723bf138aa736f77bcc1a66c70bab32587d29","modified":1620317166054},{"_id":"public/tags/双指针/index.html","hash":"39fc1516bdcadb37d23d8de5a4a518b4a34f6e46","modified":1620317166054},{"_id":"public/2021/05/06/LeetCode刷题日记-盛最多水的容器/index.html","hash":"437bcb149de196eeed6bc304a05cc3095892e2b7","modified":1620317166054},{"_id":"public/2021/04/27/LeetCode刷题日记-前K个高频元素/index.html","hash":"d302878d4fbe861b06875cbb2996813a7490366b","modified":1620317166054},{"_id":"public/2021/04/26/LeetCode刷题日记-滑动窗口最大值/index.html","hash":"0fabd4e0e0c95c19edb33ca0251ef061907bed2a","modified":1620317166054},{"_id":"public/2021/04/23/LeetCode刷题日记-柱状图中的最大面积/index.html","hash":"62481c9be5ffca1bba4c42d786b6e333ed3c5ae8","modified":1620317166054},{"_id":"public/2021/04/20/LeetCode刷题日记-设计循环双端队列/index.html","hash":"6d0479819444f8a82e98b4e7349061e03c76911e","modified":1620317166054},{"_id":"public/2021/04/19/LeetCode刷题日记-K个一组翻转链表/index.html","hash":"c539e230aa1511815d5339e93002ad783f4e36ec","modified":1620317166054},{"_id":"public/index.html","hash":"ca421cb3551dee582d8756c52315404d978d5045","modified":1620317166054},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1620317166054},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1620317166054},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1620317166054},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1620317166054},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1620317166054},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1620317166054},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1620317166054},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1620317166054},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1620317166054},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1620317166054},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1620317166054},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1620317166054},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1620317166054},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1620317166054},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1620317166054},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1620317166054},{"_id":"public/images/cosplay.jpg","hash":"f9f7877f2bf1e9b915ec8d0f1133e3ef5dc22d67","modified":1620317166054},{"_id":"public/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1620317166054},{"_id":"public/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1620317166054},{"_id":"public/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1620317166054},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1620317166054},{"_id":"public/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1620317166054},{"_id":"public/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1620317166054},{"_id":"public/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1620317166054},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1620317166054},{"_id":"public/css/main.css","hash":"c1ad82702273c7b9fb0ecb3ba434459281fd0d51","modified":1620317166054},{"_id":"public/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1620317166054},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1620317166054},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1620317166054},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1620317166054},{"_id":"public/2021/04/19/LeetCode刷题日记-K个一组翻转链表/revcure.jpg","hash":"a0b93ce869521b77a34f583b31c28a2b47fcf182","modified":1620317166054},{"_id":"public/2021/04/19/LeetCode刷题日记-K个一组翻转链表/foreach.jpg","hash":"d6bb09434700a998d9b33bb476fc9bb3673e0270","modified":1620317166054}],"Category":[{"name":"树","_id":"ckod3078i0004nwtbfdrj0n6h"},{"name":"链表","_id":"ckod3078l0008nwtbe3zv1nvz"},{"name":"队列","_id":"ckod3078r000ynwtb0sze88ac"}],"Data":[],"Page":[{"title":"categories","date":"2021-04-20T13:57:24.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2021-04-20 21:57:24\ntype: categories\n---\n","updated":"2021-04-20T14:02:04.588Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ckod3078c0000nwtbcgmk8tr1","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2021-04-20T13:57:05.000Z","type":"tags","_content":"\n","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2021-04-20 21:57:05\ntype: tags\n---\n\n","updated":"2021-04-20T13:58:05.226Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckod3078g0002nwtb4mhcb59f","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"B+ Tree","date":"2021-04-15T16:29:51.000Z","_content":"\nB+树一般用来用作数据库存储索引或者存储数据用，B+树为了减少IO访问，一般会要求高度尽可能低，为了保存相同数据又降低高度，因此在二叉搜索树的基础上变成了多叉树。\n\nB+树非叶子节点存的数据都会有个范围，会分别拿子节点的最大或者最小值合在一起。\n\n<!--more-->\n\n![](http://img.mp.sohu.com/upload/20170713/0611ff5a5103461e843ab627f8821419_th.png)\n\n而叶子节点会用一个链表串起来，方便查找，实际中应该使用双向链表，方便查找前后元素。除了存储数据外，还会存储卫星数据，所谓的卫星数据是指索引元素所指向的数据记录，比如数据库中某一行。\n\n而B-树无论是中间节点还是叶子节点都带有卫星数据。\n\n需要补充的是，在数据库的聚集索引中，叶子节点直接包含卫星数据。在非聚集索引中，叶子节点带有指向卫星数据的指针。**所以非聚合索引会需要再去通过指针查一次，因此速度会慢一点。**\n\nB+树比B-树的优势\n\n1. IO次数更少。\n2. 查询性能稳定。\n3. 范围查询简便。（B-树需要中序遍历回到上一层或几层找，B+树直接在链表查询即可）\n\n","source":"_posts/B-Tree.md","raw":"---\ntitle: B+ Tree\ndate: 2021-04-16 00:29:51\ntags: ['B+树']\ncategories: '树'\n---\n\nB+树一般用来用作数据库存储索引或者存储数据用，B+树为了减少IO访问，一般会要求高度尽可能低，为了保存相同数据又降低高度，因此在二叉搜索树的基础上变成了多叉树。\n\nB+树非叶子节点存的数据都会有个范围，会分别拿子节点的最大或者最小值合在一起。\n\n<!--more-->\n\n![](http://img.mp.sohu.com/upload/20170713/0611ff5a5103461e843ab627f8821419_th.png)\n\n而叶子节点会用一个链表串起来，方便查找，实际中应该使用双向链表，方便查找前后元素。除了存储数据外，还会存储卫星数据，所谓的卫星数据是指索引元素所指向的数据记录，比如数据库中某一行。\n\n而B-树无论是中间节点还是叶子节点都带有卫星数据。\n\n需要补充的是，在数据库的聚集索引中，叶子节点直接包含卫星数据。在非聚集索引中，叶子节点带有指向卫星数据的指针。**所以非聚合索引会需要再去通过指针查一次，因此速度会慢一点。**\n\nB+树比B-树的优势\n\n1. IO次数更少。\n2. 查询性能稳定。\n3. 范围查询简便。（B-树需要中序遍历回到上一层或几层找，B+树直接在链表查询即可）\n\n","slug":"B-Tree","published":1,"updated":"2021-04-20T14:05:05.464Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckod3078e0001nwtb3jid92n0","content":"<p>B+树一般用来用作数据库存储索引或者存储数据用，B+树为了减少IO访问，一般会要求高度尽可能低，为了保存相同数据又降低高度，因此在二叉搜索树的基础上变成了多叉树。</p>\n<p>B+树非叶子节点存的数据都会有个范围，会分别拿子节点的最大或者最小值合在一起。</p>\n<span id=\"more\"></span>\n\n<p><img src=\"http://img.mp.sohu.com/upload/20170713/0611ff5a5103461e843ab627f8821419_th.png\"></p>\n<p>而叶子节点会用一个链表串起来，方便查找，实际中应该使用双向链表，方便查找前后元素。除了存储数据外，还会存储卫星数据，所谓的卫星数据是指索引元素所指向的数据记录，比如数据库中某一行。</p>\n<p>而B-树无论是中间节点还是叶子节点都带有卫星数据。</p>\n<p>需要补充的是，在数据库的聚集索引中，叶子节点直接包含卫星数据。在非聚集索引中，叶子节点带有指向卫星数据的指针。<strong>所以非聚合索引会需要再去通过指针查一次，因此速度会慢一点。</strong></p>\n<p>B+树比B-树的优势</p>\n<ol>\n<li>IO次数更少。</li>\n<li>查询性能稳定。</li>\n<li>范围查询简便。（B-树需要中序遍历回到上一层或几层找，B+树直接在链表查询即可）</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>B+树一般用来用作数据库存储索引或者存储数据用，B+树为了减少IO访问，一般会要求高度尽可能低，为了保存相同数据又降低高度，因此在二叉搜索树的基础上变成了多叉树。</p>\n<p>B+树非叶子节点存的数据都会有个范围，会分别拿子节点的最大或者最小值合在一起。</p>","more":"<p><img src=\"http://img.mp.sohu.com/upload/20170713/0611ff5a5103461e843ab627f8821419_th.png\"></p>\n<p>而叶子节点会用一个链表串起来，方便查找，实际中应该使用双向链表，方便查找前后元素。除了存储数据外，还会存储卫星数据，所谓的卫星数据是指索引元素所指向的数据记录，比如数据库中某一行。</p>\n<p>而B-树无论是中间节点还是叶子节点都带有卫星数据。</p>\n<p>需要补充的是，在数据库的聚集索引中，叶子节点直接包含卫星数据。在非聚集索引中，叶子节点带有指向卫星数据的指针。<strong>所以非聚合索引会需要再去通过指针查一次，因此速度会慢一点。</strong></p>\n<p>B+树比B-树的优势</p>\n<ol>\n<li>IO次数更少。</li>\n<li>查询性能稳定。</li>\n<li>范围查询简便。（B-树需要中序遍历回到上一层或几层找，B+树直接在链表查询即可）</li>\n</ol>"},{"title":"LeetCode刷题日记:K个一组翻转链表","date":"2021-04-19T15:28:27.000Z","_content":"\n今天刷到LeetCode第25题，记录一下刷题的思路，方便以后回看。（真的一周不写就容易忘啊，所以还是要多练）\n\n这个题大概有三种解法：\n\n1. 借助栈先进后出的思路，当链表元素k个一组放进栈中，然后在拿出来。（缺点是时间复杂度较高，入栈出栈都要遍历链表，不推荐，了解思路即可）。\n2. 递归：k个一组进行递归，具体思路请参考后面图解。\n3. 迭代：同上，参考后面图解。\n\n话不多说，先上代码：\n\n<!-- more -->\n\n#### 借助栈\n\n```\n        Deque<ListNode> stack = new LinkedList<>();\n\n        ListNode dummy = new ListNode(0);\n        //这个p会一直移动，需要另起一个指针\n        ListNode p = dummy;\n        while (true) {\n            int count = 0;\n            //这儿不能直接head移动，因为如果不足k个，head指针将找不到，因此另起一个指针\n            ListNode temp = head;\n            //k个一组放进栈中\n            while (temp != null && count < k) {\n                stack.push(temp);\n                temp = temp.next;\n                count++;\n            }\n            //当不足k个不用反转\n            if (count != k) {\n                p.next = head;\n                break;\n            }\n            while (!stack.isEmpty()) {\n                p.next = stack.pop();\n                p = p.next;\n            }\n            //将head替换为k个位置之后，方便下次循环\n            head = temp;\n        }\n\n        return dummy.next;\n```\n\n这个思路其实没啥好说的，用一个指针p依次的跟着栈往后移，当不足k个时直接返回头指针dummy.next。\n\n#### 看链表代码的几个重点思路\n\n这里需要强调的几点是在链表写代码时候的常识吧：\n\n1、链表里面经常会有如下代码，初学者看着会很奇怪，我一开始学习的时候也疑惑了很久：\n\n```java\n        ListNode dummy = new ListNode(0);\n        ListNode p = dummy;\n```\n\n**这里已经新创建了一个dummy，为啥还要再创建一个和dummy一样的p？为啥不直接用dummy?**\n\n**原因是，当你新建的dummy节点在后续操作的时候，会进行移动，如p=p.next这种，如果直接用dummy去操作，后面你拿到的dummy就不是原来的位置了，而是移动后的位置，这时候如果你想要拿到原来的dummy，就需要新创建一个帮手去帮dummy做这个事，也就是p。**\n\n**上面这个逻辑在链表代码里面会经常用到，搞懂其原因后在看代码就不会有种云里雾里的感觉了。**\n\n2、链表里面经常会出现下面这种xx.next满天飞的情况，理解起来会很困难。\n\n```java\nhead.next=next.next.next;\nnext.next=head;\n```\n\n你按照我的思路来想其实就会简单很多，**当xx.next在表达式左边的时候，就只有一个含义，xx的下一个节点指向表达式右边的位置**。\n\n如`head.next=next.next;`就是指head指向next的下一个节点。你这样去梳理下以前看着比较懵逼的代码就会清晰很多。反正我思路是清晰很多。\n\n3、一旦A.next=B之后，代表A以前指向的位置指针已经断开，现在指向B了。如果后续还需要用以前A.next的节点话就需要提前记录下来。因此就会在链表了经常出现下面这种代码：\n\n```java\n                ListNode next = tail.next.next;\n                tail.next.next = prev.next;\n                prev.next = tail.next;\n                tail.next = next;\n```\n\n因为tail.next.next在第二行断开了，第四行有需要用到，所以会提前用Next把tail.next.next存起来。\n\n**第三点乍看和第一点很像，但是还是有细微区别的，一个是指针移动的记录，一个是指针断开的记录。**\n\n#### 递归\n\n```java\n        int count = 0;\n        ListNode curr = head;\n        while (curr != null && count < k) {\n            curr = curr.next;\n            count++;\n        }\n\n        if (count == k) {\n            curr = reverseKGroup(curr, k);\n            while (count-- > 0) {\n                ListNode temp = head.next;\n                head.next = curr;\n                curr = head;\n                head = temp;\n            }\n            head = curr;\n        }\n\n        return head;\n```\n\n代码其实还是很清晰的，我们一点一点来理一下。\n\n```java\n        int count = 0;\n        ListNode curr = head;\n        while (curr != null && count < k) {\n            curr = curr.next;\n            count++;\n        }\n```\n\n上面这段代码的主要目的就是k个节点分组，这里`ListNode curr=head;`要用我上面的基本点想一下，由于如果直接用head后移的话初始的head位置就找不到了，因此需要一个帮手curr去帮它做这个事。\n\n接着往下看，如果有k个节点，就k个一组翻转，否则直接返回。\n\n`curr = reverseKGroup(curr, k);` 这个是递归调用，这里需要说明的一点是在看递归相关代码不要强行去人肉递归，你会很痛苦的，且会把自己搞晕，毕竟我们不是机器。**我们只需要知道这个代码后面得出的结果就是经过reverseKGroup(curr, k)这个函数处理的curr就直接是k个一组翻转好的结果，我们现在唯一要做的就是，将curr前面的k个元素翻转好在组装就行。**\n\n而下面的代码就是做的这个事：\n\n```java\n\t\t\twhile (count-- > 0) {\n                ListNode temp = head.next;\n                head.next = curr;\n                curr = head;\n                head = temp;\n            }\n            head = curr;\n```\n\n这块不是那么好理解，碰到这种情况一般画个图，问题就迎刃而解了~\n\n以head = [1,2,3,4,5], k = 3为例，图画的可能有点丑，但是可能会对你有点帮助。\n\n![](revcure.jpg)\n\n这里k=3，因此只会循环三次，当最后循环完curr的位置是在头结点，head的位置在temp，因此后面需要将head=curr。最后返回head即可。\n\n#### 迭代\n\n```java\n        int n = 0;\n//        统计链表长度\n        for (ListNode i = head; i != null; n++, i = i.next);\n\n        ListNode dmy = new ListNode(0);\n        dmy.next = head;\n        for(ListNode prev = dmy, tail = head; n >= k; n -= k) {\n            for (int i = 1; i < k; i++) {\n                ListNode next = tail.next.next;\n                tail.next.next = prev.next;\n                prev.next = tail.next;\n                tail.next = next;\n            }\n\n            prev = tail;\n            tail = tail.next;\n        }\n        return dmy.next;\n```\n\n迭代的代码可能会有点绕，xx.next.next这种样式，不要有恐惧感，看懂之后思路还是很清晰的。\n\n前面两行代码是用n统计链表长度。其中遍历链表的写法还是很新颖的，值得借鉴。\n\n下面在head前面构造了一个哨兵节点dummy，然后以dummy为prev,head为tail就开始翻转了。\n\n`for(ListNode prev = dmy, tail = head; n >= k; n -= k)`这块代码是将链表按k个一组开始进行翻转。\n\n里面的`for (int i = 1; i < k; i++)`这里是从1开始而不是0开始，感觉会少循环一次。我是这么理解的，当有k个数，其实真正翻转的时候只会翻转k-1次，这里1是没问题的。\n\n具体的循环思路可以参考下图，画的有点乱，我相信你能看懂的~\n\n![](foreach.jpg)\n\n一开始prev和tail是相邻的，`tail.next.next=prev.next`其实就是指将tail的下一个节点指向prev的下一个节点，注意是tail的下一个节点不是tail。\n\n然后`prev.next=tail.next`是指prev指向tail的下一个节点。\n\n`tail.next=next`是指tail指向原来tail.next.next位置，这里不直接用tail.next.next是因为这个指针现在已经断掉了，所以用实现保存好的next。\n\n在k个一组翻转完会将prev和tail进行重新赋值，在进行下一轮。\n\n最后返回的是最开始的head节点位置，只是由于head现在已经移动不知道到哪里去了，所以用的是dummy.next，其实就是最开始的head位置。\n\n#### 写在最后\n\n这三个解法主要掌握递归和迭代即可，栈那个其实没啥意义，时间复杂度太高，实际很难用到，除非什么特殊场景。\n\n迭代和递归写法其实都很绕，经常会出现今天会写，过一周看又有点不会了，所以多看多写吧，没啥办法，加油！","source":"_posts/LeetCode刷题日记-K个一组翻转链表.md","raw":"---\ntitle: 'LeetCode刷题日记:K个一组翻转链表'\ndate: 2021-04-19 23:28:27\ntags: ['LeetCode','日记','链表']\ncategories: ['链表']\n\n---\n\n今天刷到LeetCode第25题，记录一下刷题的思路，方便以后回看。（真的一周不写就容易忘啊，所以还是要多练）\n\n这个题大概有三种解法：\n\n1. 借助栈先进后出的思路，当链表元素k个一组放进栈中，然后在拿出来。（缺点是时间复杂度较高，入栈出栈都要遍历链表，不推荐，了解思路即可）。\n2. 递归：k个一组进行递归，具体思路请参考后面图解。\n3. 迭代：同上，参考后面图解。\n\n话不多说，先上代码：\n\n<!-- more -->\n\n#### 借助栈\n\n```\n        Deque<ListNode> stack = new LinkedList<>();\n\n        ListNode dummy = new ListNode(0);\n        //这个p会一直移动，需要另起一个指针\n        ListNode p = dummy;\n        while (true) {\n            int count = 0;\n            //这儿不能直接head移动，因为如果不足k个，head指针将找不到，因此另起一个指针\n            ListNode temp = head;\n            //k个一组放进栈中\n            while (temp != null && count < k) {\n                stack.push(temp);\n                temp = temp.next;\n                count++;\n            }\n            //当不足k个不用反转\n            if (count != k) {\n                p.next = head;\n                break;\n            }\n            while (!stack.isEmpty()) {\n                p.next = stack.pop();\n                p = p.next;\n            }\n            //将head替换为k个位置之后，方便下次循环\n            head = temp;\n        }\n\n        return dummy.next;\n```\n\n这个思路其实没啥好说的，用一个指针p依次的跟着栈往后移，当不足k个时直接返回头指针dummy.next。\n\n#### 看链表代码的几个重点思路\n\n这里需要强调的几点是在链表写代码时候的常识吧：\n\n1、链表里面经常会有如下代码，初学者看着会很奇怪，我一开始学习的时候也疑惑了很久：\n\n```java\n        ListNode dummy = new ListNode(0);\n        ListNode p = dummy;\n```\n\n**这里已经新创建了一个dummy，为啥还要再创建一个和dummy一样的p？为啥不直接用dummy?**\n\n**原因是，当你新建的dummy节点在后续操作的时候，会进行移动，如p=p.next这种，如果直接用dummy去操作，后面你拿到的dummy就不是原来的位置了，而是移动后的位置，这时候如果你想要拿到原来的dummy，就需要新创建一个帮手去帮dummy做这个事，也就是p。**\n\n**上面这个逻辑在链表代码里面会经常用到，搞懂其原因后在看代码就不会有种云里雾里的感觉了。**\n\n2、链表里面经常会出现下面这种xx.next满天飞的情况，理解起来会很困难。\n\n```java\nhead.next=next.next.next;\nnext.next=head;\n```\n\n你按照我的思路来想其实就会简单很多，**当xx.next在表达式左边的时候，就只有一个含义，xx的下一个节点指向表达式右边的位置**。\n\n如`head.next=next.next;`就是指head指向next的下一个节点。你这样去梳理下以前看着比较懵逼的代码就会清晰很多。反正我思路是清晰很多。\n\n3、一旦A.next=B之后，代表A以前指向的位置指针已经断开，现在指向B了。如果后续还需要用以前A.next的节点话就需要提前记录下来。因此就会在链表了经常出现下面这种代码：\n\n```java\n                ListNode next = tail.next.next;\n                tail.next.next = prev.next;\n                prev.next = tail.next;\n                tail.next = next;\n```\n\n因为tail.next.next在第二行断开了，第四行有需要用到，所以会提前用Next把tail.next.next存起来。\n\n**第三点乍看和第一点很像，但是还是有细微区别的，一个是指针移动的记录，一个是指针断开的记录。**\n\n#### 递归\n\n```java\n        int count = 0;\n        ListNode curr = head;\n        while (curr != null && count < k) {\n            curr = curr.next;\n            count++;\n        }\n\n        if (count == k) {\n            curr = reverseKGroup(curr, k);\n            while (count-- > 0) {\n                ListNode temp = head.next;\n                head.next = curr;\n                curr = head;\n                head = temp;\n            }\n            head = curr;\n        }\n\n        return head;\n```\n\n代码其实还是很清晰的，我们一点一点来理一下。\n\n```java\n        int count = 0;\n        ListNode curr = head;\n        while (curr != null && count < k) {\n            curr = curr.next;\n            count++;\n        }\n```\n\n上面这段代码的主要目的就是k个节点分组，这里`ListNode curr=head;`要用我上面的基本点想一下，由于如果直接用head后移的话初始的head位置就找不到了，因此需要一个帮手curr去帮它做这个事。\n\n接着往下看，如果有k个节点，就k个一组翻转，否则直接返回。\n\n`curr = reverseKGroup(curr, k);` 这个是递归调用，这里需要说明的一点是在看递归相关代码不要强行去人肉递归，你会很痛苦的，且会把自己搞晕，毕竟我们不是机器。**我们只需要知道这个代码后面得出的结果就是经过reverseKGroup(curr, k)这个函数处理的curr就直接是k个一组翻转好的结果，我们现在唯一要做的就是，将curr前面的k个元素翻转好在组装就行。**\n\n而下面的代码就是做的这个事：\n\n```java\n\t\t\twhile (count-- > 0) {\n                ListNode temp = head.next;\n                head.next = curr;\n                curr = head;\n                head = temp;\n            }\n            head = curr;\n```\n\n这块不是那么好理解，碰到这种情况一般画个图，问题就迎刃而解了~\n\n以head = [1,2,3,4,5], k = 3为例，图画的可能有点丑，但是可能会对你有点帮助。\n\n![](revcure.jpg)\n\n这里k=3，因此只会循环三次，当最后循环完curr的位置是在头结点，head的位置在temp，因此后面需要将head=curr。最后返回head即可。\n\n#### 迭代\n\n```java\n        int n = 0;\n//        统计链表长度\n        for (ListNode i = head; i != null; n++, i = i.next);\n\n        ListNode dmy = new ListNode(0);\n        dmy.next = head;\n        for(ListNode prev = dmy, tail = head; n >= k; n -= k) {\n            for (int i = 1; i < k; i++) {\n                ListNode next = tail.next.next;\n                tail.next.next = prev.next;\n                prev.next = tail.next;\n                tail.next = next;\n            }\n\n            prev = tail;\n            tail = tail.next;\n        }\n        return dmy.next;\n```\n\n迭代的代码可能会有点绕，xx.next.next这种样式，不要有恐惧感，看懂之后思路还是很清晰的。\n\n前面两行代码是用n统计链表长度。其中遍历链表的写法还是很新颖的，值得借鉴。\n\n下面在head前面构造了一个哨兵节点dummy，然后以dummy为prev,head为tail就开始翻转了。\n\n`for(ListNode prev = dmy, tail = head; n >= k; n -= k)`这块代码是将链表按k个一组开始进行翻转。\n\n里面的`for (int i = 1; i < k; i++)`这里是从1开始而不是0开始，感觉会少循环一次。我是这么理解的，当有k个数，其实真正翻转的时候只会翻转k-1次，这里1是没问题的。\n\n具体的循环思路可以参考下图，画的有点乱，我相信你能看懂的~\n\n![](foreach.jpg)\n\n一开始prev和tail是相邻的，`tail.next.next=prev.next`其实就是指将tail的下一个节点指向prev的下一个节点，注意是tail的下一个节点不是tail。\n\n然后`prev.next=tail.next`是指prev指向tail的下一个节点。\n\n`tail.next=next`是指tail指向原来tail.next.next位置，这里不直接用tail.next.next是因为这个指针现在已经断掉了，所以用实现保存好的next。\n\n在k个一组翻转完会将prev和tail进行重新赋值，在进行下一轮。\n\n最后返回的是最开始的head节点位置，只是由于head现在已经移动不知道到哪里去了，所以用的是dummy.next，其实就是最开始的head位置。\n\n#### 写在最后\n\n这三个解法主要掌握递归和迭代即可，栈那个其实没啥意义，时间复杂度太高，实际很难用到，除非什么特殊场景。\n\n迭代和递归写法其实都很绕，经常会出现今天会写，过一周看又有点不会了，所以多看多写吧，没啥办法，加油！","slug":"LeetCode刷题日记-K个一组翻转链表","published":1,"updated":"2021-04-20T15:32:34.220Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckod3078h0003nwtb0y16g6xj","content":"<p>今天刷到LeetCode第25题，记录一下刷题的思路，方便以后回看。（真的一周不写就容易忘啊，所以还是要多练）</p>\n<p>这个题大概有三种解法：</p>\n<ol>\n<li>借助栈先进后出的思路，当链表元素k个一组放进栈中，然后在拿出来。（缺点是时间复杂度较高，入栈出栈都要遍历链表，不推荐，了解思路即可）。</li>\n<li>递归：k个一组进行递归，具体思路请参考后面图解。</li>\n<li>迭代：同上，参考后面图解。</li>\n</ol>\n<p>话不多说，先上代码：</p>\n<span id=\"more\"></span>\n\n<h4 id=\"借助栈\"><a href=\"#借助栈\" class=\"headerlink\" title=\"借助栈\"></a>借助栈</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Deque&lt;ListNode&gt; stack &#x3D; new LinkedList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">ListNode dummy &#x3D; new ListNode(0);</span><br><span class=\"line\">&#x2F;&#x2F;这个p会一直移动，需要另起一个指针</span><br><span class=\"line\">ListNode p &#x3D; dummy;</span><br><span class=\"line\">while (true) &#123;</span><br><span class=\"line\">    int count &#x3D; 0;</span><br><span class=\"line\">    &#x2F;&#x2F;这儿不能直接head移动，因为如果不足k个，head指针将找不到，因此另起一个指针</span><br><span class=\"line\">    ListNode temp &#x3D; head;</span><br><span class=\"line\">    &#x2F;&#x2F;k个一组放进栈中</span><br><span class=\"line\">    while (temp !&#x3D; null &amp;&amp; count &lt; k) &#123;</span><br><span class=\"line\">        stack.push(temp);</span><br><span class=\"line\">        temp &#x3D; temp.next;</span><br><span class=\"line\">        count++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#x2F;&#x2F;当不足k个不用反转</span><br><span class=\"line\">    if (count !&#x3D; k) &#123;</span><br><span class=\"line\">        p.next &#x3D; head;</span><br><span class=\"line\">        break;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    while (!stack.isEmpty()) &#123;</span><br><span class=\"line\">        p.next &#x3D; stack.pop();</span><br><span class=\"line\">        p &#x3D; p.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#x2F;&#x2F;将head替换为k个位置之后，方便下次循环</span><br><span class=\"line\">    head &#x3D; temp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">return dummy.next;</span><br></pre></td></tr></table></figure>\n\n<p>这个思路其实没啥好说的，用一个指针p依次的跟着栈往后移，当不足k个时直接返回头指针dummy.next。</p>\n<h4 id=\"看链表代码的几个重点思路\"><a href=\"#看链表代码的几个重点思路\" class=\"headerlink\" title=\"看链表代码的几个重点思路\"></a>看链表代码的几个重点思路</h4><p>这里需要强调的几点是在链表写代码时候的常识吧：</p>\n<p>1、链表里面经常会有如下代码，初学者看着会很奇怪，我一开始学习的时候也疑惑了很久：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ListNode dummy = <span class=\"keyword\">new</span> ListNode(<span class=\"number\">0</span>);</span><br><span class=\"line\">ListNode p = dummy;</span><br></pre></td></tr></table></figure>\n\n<p><strong>这里已经新创建了一个dummy，为啥还要再创建一个和dummy一样的p？为啥不直接用dummy?</strong></p>\n<p><strong>原因是，当你新建的dummy节点在后续操作的时候，会进行移动，如p=p.next这种，如果直接用dummy去操作，后面你拿到的dummy就不是原来的位置了，而是移动后的位置，这时候如果你想要拿到原来的dummy，就需要新创建一个帮手去帮dummy做这个事，也就是p。</strong></p>\n<p><strong>上面这个逻辑在链表代码里面会经常用到，搞懂其原因后在看代码就不会有种云里雾里的感觉了。</strong></p>\n<p>2、链表里面经常会出现下面这种xx.next满天飞的情况，理解起来会很困难。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">head.next=next.next.next;</span><br><span class=\"line\">next.next=head;</span><br></pre></td></tr></table></figure>\n\n<p>你按照我的思路来想其实就会简单很多，<strong>当xx.next在表达式左边的时候，就只有一个含义，xx的下一个节点指向表达式右边的位置</strong>。</p>\n<p>如<code>head.next=next.next;</code>就是指head指向next的下一个节点。你这样去梳理下以前看着比较懵逼的代码就会清晰很多。反正我思路是清晰很多。</p>\n<p>3、一旦A.next=B之后，代表A以前指向的位置指针已经断开，现在指向B了。如果后续还需要用以前A.next的节点话就需要提前记录下来。因此就会在链表了经常出现下面这种代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ListNode next = tail.next.next;</span><br><span class=\"line\">tail.next.next = prev.next;</span><br><span class=\"line\">prev.next = tail.next;</span><br><span class=\"line\">tail.next = next;</span><br></pre></td></tr></table></figure>\n\n<p>因为tail.next.next在第二行断开了，第四行有需要用到，所以会提前用Next把tail.next.next存起来。</p>\n<p><strong>第三点乍看和第一点很像，但是还是有细微区别的，一个是指针移动的记录，一个是指针断开的记录。</strong></p>\n<h4 id=\"递归\"><a href=\"#递归\" class=\"headerlink\" title=\"递归\"></a>递归</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">ListNode curr = head;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (curr != <span class=\"keyword\">null</span> &amp;&amp; count &lt; k) &#123;</span><br><span class=\"line\">    curr = curr.next;</span><br><span class=\"line\">    count++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (count == k) &#123;</span><br><span class=\"line\">    curr = reverseKGroup(curr, k);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (count-- &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        ListNode temp = head.next;</span><br><span class=\"line\">        head.next = curr;</span><br><span class=\"line\">        curr = head;</span><br><span class=\"line\">        head = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    head = curr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> head;</span><br></pre></td></tr></table></figure>\n\n<p>代码其实还是很清晰的，我们一点一点来理一下。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">ListNode curr = head;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (curr != <span class=\"keyword\">null</span> &amp;&amp; count &lt; k) &#123;</span><br><span class=\"line\">    curr = curr.next;</span><br><span class=\"line\">    count++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面这段代码的主要目的就是k个节点分组，这里<code>ListNode curr=head;</code>要用我上面的基本点想一下，由于如果直接用head后移的话初始的head位置就找不到了，因此需要一个帮手curr去帮它做这个事。</p>\n<p>接着往下看，如果有k个节点，就k个一组翻转，否则直接返回。</p>\n<p><code>curr = reverseKGroup(curr, k);</code> 这个是递归调用，这里需要说明的一点是在看递归相关代码不要强行去人肉递归，你会很痛苦的，且会把自己搞晕，毕竟我们不是机器。<strong>我们只需要知道这个代码后面得出的结果就是经过reverseKGroup(curr, k)这个函数处理的curr就直接是k个一组翻转好的结果，我们现在唯一要做的就是，将curr前面的k个元素翻转好在组装就行。</strong></p>\n<p>而下面的代码就是做的这个事：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> (count-- &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">             ListNode temp = head.next;</span><br><span class=\"line\">             head.next = curr;</span><br><span class=\"line\">             curr = head;</span><br><span class=\"line\">             head = temp;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         head = curr;</span><br></pre></td></tr></table></figure>\n\n<p>这块不是那么好理解，碰到这种情况一般画个图，问题就迎刃而解了~</p>\n<p>以head = [1,2,3,4,5], k = 3为例，图画的可能有点丑，但是可能会对你有点帮助。</p>\n<p><img src=\"revcure.jpg\"></p>\n<p>这里k=3，因此只会循环三次，当最后循环完curr的位置是在头结点，head的位置在temp，因此后面需要将head=curr。最后返回head即可。</p>\n<h4 id=\"迭代\"><a href=\"#迭代\" class=\"headerlink\" title=\"迭代\"></a>迭代</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">int</span> n = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"comment\">//        统计链表长度</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (ListNode i = head; i != <span class=\"keyword\">null</span>; n++, i = i.next);</span><br><span class=\"line\"></span><br><span class=\"line\">        ListNode dmy = <span class=\"keyword\">new</span> ListNode(<span class=\"number\">0</span>);</span><br><span class=\"line\">        dmy.next = head;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(ListNode prev = dmy, tail = head; n &gt;= k; n -= k) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; k; i++) &#123;</span><br><span class=\"line\">                ListNode next = tail.next.next;</span><br><span class=\"line\">                tail.next.next = prev.next;</span><br><span class=\"line\">                prev.next = tail.next;</span><br><span class=\"line\">                tail.next = next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            prev = tail;</span><br><span class=\"line\">            tail = tail.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dmy.next;</span><br></pre></td></tr></table></figure>\n\n<p>迭代的代码可能会有点绕，xx.next.next这种样式，不要有恐惧感，看懂之后思路还是很清晰的。</p>\n<p>前面两行代码是用n统计链表长度。其中遍历链表的写法还是很新颖的，值得借鉴。</p>\n<p>下面在head前面构造了一个哨兵节点dummy，然后以dummy为prev,head为tail就开始翻转了。</p>\n<p><code>for(ListNode prev = dmy, tail = head; n &gt;= k; n -= k)</code>这块代码是将链表按k个一组开始进行翻转。</p>\n<p>里面的<code>for (int i = 1; i &lt; k; i++)</code>这里是从1开始而不是0开始，感觉会少循环一次。我是这么理解的，当有k个数，其实真正翻转的时候只会翻转k-1次，这里1是没问题的。</p>\n<p>具体的循环思路可以参考下图，画的有点乱，我相信你能看懂的~</p>\n<p><img src=\"foreach.jpg\"></p>\n<p>一开始prev和tail是相邻的，<code>tail.next.next=prev.next</code>其实就是指将tail的下一个节点指向prev的下一个节点，注意是tail的下一个节点不是tail。</p>\n<p>然后<code>prev.next=tail.next</code>是指prev指向tail的下一个节点。</p>\n<p><code>tail.next=next</code>是指tail指向原来tail.next.next位置，这里不直接用tail.next.next是因为这个指针现在已经断掉了，所以用实现保存好的next。</p>\n<p>在k个一组翻转完会将prev和tail进行重新赋值，在进行下一轮。</p>\n<p>最后返回的是最开始的head节点位置，只是由于head现在已经移动不知道到哪里去了，所以用的是dummy.next，其实就是最开始的head位置。</p>\n<h4 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h4><p>这三个解法主要掌握递归和迭代即可，栈那个其实没啥意义，时间复杂度太高，实际很难用到，除非什么特殊场景。</p>\n<p>迭代和递归写法其实都很绕，经常会出现今天会写，过一周看又有点不会了，所以多看多写吧，没啥办法，加油！</p>\n","site":{"data":{}},"excerpt":"<p>今天刷到LeetCode第25题，记录一下刷题的思路，方便以后回看。（真的一周不写就容易忘啊，所以还是要多练）</p>\n<p>这个题大概有三种解法：</p>\n<ol>\n<li>借助栈先进后出的思路，当链表元素k个一组放进栈中，然后在拿出来。（缺点是时间复杂度较高，入栈出栈都要遍历链表，不推荐，了解思路即可）。</li>\n<li>递归：k个一组进行递归，具体思路请参考后面图解。</li>\n<li>迭代：同上，参考后面图解。</li>\n</ol>\n<p>话不多说，先上代码：</p>","more":"<h4 id=\"借助栈\"><a href=\"#借助栈\" class=\"headerlink\" title=\"借助栈\"></a>借助栈</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Deque&lt;ListNode&gt; stack &#x3D; new LinkedList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">ListNode dummy &#x3D; new ListNode(0);</span><br><span class=\"line\">&#x2F;&#x2F;这个p会一直移动，需要另起一个指针</span><br><span class=\"line\">ListNode p &#x3D; dummy;</span><br><span class=\"line\">while (true) &#123;</span><br><span class=\"line\">    int count &#x3D; 0;</span><br><span class=\"line\">    &#x2F;&#x2F;这儿不能直接head移动，因为如果不足k个，head指针将找不到，因此另起一个指针</span><br><span class=\"line\">    ListNode temp &#x3D; head;</span><br><span class=\"line\">    &#x2F;&#x2F;k个一组放进栈中</span><br><span class=\"line\">    while (temp !&#x3D; null &amp;&amp; count &lt; k) &#123;</span><br><span class=\"line\">        stack.push(temp);</span><br><span class=\"line\">        temp &#x3D; temp.next;</span><br><span class=\"line\">        count++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#x2F;&#x2F;当不足k个不用反转</span><br><span class=\"line\">    if (count !&#x3D; k) &#123;</span><br><span class=\"line\">        p.next &#x3D; head;</span><br><span class=\"line\">        break;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    while (!stack.isEmpty()) &#123;</span><br><span class=\"line\">        p.next &#x3D; stack.pop();</span><br><span class=\"line\">        p &#x3D; p.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#x2F;&#x2F;将head替换为k个位置之后，方便下次循环</span><br><span class=\"line\">    head &#x3D; temp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">return dummy.next;</span><br></pre></td></tr></table></figure>\n\n<p>这个思路其实没啥好说的，用一个指针p依次的跟着栈往后移，当不足k个时直接返回头指针dummy.next。</p>\n<h4 id=\"看链表代码的几个重点思路\"><a href=\"#看链表代码的几个重点思路\" class=\"headerlink\" title=\"看链表代码的几个重点思路\"></a>看链表代码的几个重点思路</h4><p>这里需要强调的几点是在链表写代码时候的常识吧：</p>\n<p>1、链表里面经常会有如下代码，初学者看着会很奇怪，我一开始学习的时候也疑惑了很久：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ListNode dummy = <span class=\"keyword\">new</span> ListNode(<span class=\"number\">0</span>);</span><br><span class=\"line\">ListNode p = dummy;</span><br></pre></td></tr></table></figure>\n\n<p><strong>这里已经新创建了一个dummy，为啥还要再创建一个和dummy一样的p？为啥不直接用dummy?</strong></p>\n<p><strong>原因是，当你新建的dummy节点在后续操作的时候，会进行移动，如p=p.next这种，如果直接用dummy去操作，后面你拿到的dummy就不是原来的位置了，而是移动后的位置，这时候如果你想要拿到原来的dummy，就需要新创建一个帮手去帮dummy做这个事，也就是p。</strong></p>\n<p><strong>上面这个逻辑在链表代码里面会经常用到，搞懂其原因后在看代码就不会有种云里雾里的感觉了。</strong></p>\n<p>2、链表里面经常会出现下面这种xx.next满天飞的情况，理解起来会很困难。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">head.next=next.next.next;</span><br><span class=\"line\">next.next=head;</span><br></pre></td></tr></table></figure>\n\n<p>你按照我的思路来想其实就会简单很多，<strong>当xx.next在表达式左边的时候，就只有一个含义，xx的下一个节点指向表达式右边的位置</strong>。</p>\n<p>如<code>head.next=next.next;</code>就是指head指向next的下一个节点。你这样去梳理下以前看着比较懵逼的代码就会清晰很多。反正我思路是清晰很多。</p>\n<p>3、一旦A.next=B之后，代表A以前指向的位置指针已经断开，现在指向B了。如果后续还需要用以前A.next的节点话就需要提前记录下来。因此就会在链表了经常出现下面这种代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ListNode next = tail.next.next;</span><br><span class=\"line\">tail.next.next = prev.next;</span><br><span class=\"line\">prev.next = tail.next;</span><br><span class=\"line\">tail.next = next;</span><br></pre></td></tr></table></figure>\n\n<p>因为tail.next.next在第二行断开了，第四行有需要用到，所以会提前用Next把tail.next.next存起来。</p>\n<p><strong>第三点乍看和第一点很像，但是还是有细微区别的，一个是指针移动的记录，一个是指针断开的记录。</strong></p>\n<h4 id=\"递归\"><a href=\"#递归\" class=\"headerlink\" title=\"递归\"></a>递归</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">ListNode curr = head;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (curr != <span class=\"keyword\">null</span> &amp;&amp; count &lt; k) &#123;</span><br><span class=\"line\">    curr = curr.next;</span><br><span class=\"line\">    count++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (count == k) &#123;</span><br><span class=\"line\">    curr = reverseKGroup(curr, k);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (count-- &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        ListNode temp = head.next;</span><br><span class=\"line\">        head.next = curr;</span><br><span class=\"line\">        curr = head;</span><br><span class=\"line\">        head = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    head = curr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> head;</span><br></pre></td></tr></table></figure>\n\n<p>代码其实还是很清晰的，我们一点一点来理一下。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">ListNode curr = head;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (curr != <span class=\"keyword\">null</span> &amp;&amp; count &lt; k) &#123;</span><br><span class=\"line\">    curr = curr.next;</span><br><span class=\"line\">    count++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面这段代码的主要目的就是k个节点分组，这里<code>ListNode curr=head;</code>要用我上面的基本点想一下，由于如果直接用head后移的话初始的head位置就找不到了，因此需要一个帮手curr去帮它做这个事。</p>\n<p>接着往下看，如果有k个节点，就k个一组翻转，否则直接返回。</p>\n<p><code>curr = reverseKGroup(curr, k);</code> 这个是递归调用，这里需要说明的一点是在看递归相关代码不要强行去人肉递归，你会很痛苦的，且会把自己搞晕，毕竟我们不是机器。<strong>我们只需要知道这个代码后面得出的结果就是经过reverseKGroup(curr, k)这个函数处理的curr就直接是k个一组翻转好的结果，我们现在唯一要做的就是，将curr前面的k个元素翻转好在组装就行。</strong></p>\n<p>而下面的代码就是做的这个事：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> (count-- &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">             ListNode temp = head.next;</span><br><span class=\"line\">             head.next = curr;</span><br><span class=\"line\">             curr = head;</span><br><span class=\"line\">             head = temp;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         head = curr;</span><br></pre></td></tr></table></figure>\n\n<p>这块不是那么好理解，碰到这种情况一般画个图，问题就迎刃而解了~</p>\n<p>以head = [1,2,3,4,5], k = 3为例，图画的可能有点丑，但是可能会对你有点帮助。</p>\n<p><img src=\"revcure.jpg\"></p>\n<p>这里k=3，因此只会循环三次，当最后循环完curr的位置是在头结点，head的位置在temp，因此后面需要将head=curr。最后返回head即可。</p>\n<h4 id=\"迭代\"><a href=\"#迭代\" class=\"headerlink\" title=\"迭代\"></a>迭代</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">int</span> n = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"comment\">//        统计链表长度</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (ListNode i = head; i != <span class=\"keyword\">null</span>; n++, i = i.next);</span><br><span class=\"line\"></span><br><span class=\"line\">        ListNode dmy = <span class=\"keyword\">new</span> ListNode(<span class=\"number\">0</span>);</span><br><span class=\"line\">        dmy.next = head;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(ListNode prev = dmy, tail = head; n &gt;= k; n -= k) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; k; i++) &#123;</span><br><span class=\"line\">                ListNode next = tail.next.next;</span><br><span class=\"line\">                tail.next.next = prev.next;</span><br><span class=\"line\">                prev.next = tail.next;</span><br><span class=\"line\">                tail.next = next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            prev = tail;</span><br><span class=\"line\">            tail = tail.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dmy.next;</span><br></pre></td></tr></table></figure>\n\n<p>迭代的代码可能会有点绕，xx.next.next这种样式，不要有恐惧感，看懂之后思路还是很清晰的。</p>\n<p>前面两行代码是用n统计链表长度。其中遍历链表的写法还是很新颖的，值得借鉴。</p>\n<p>下面在head前面构造了一个哨兵节点dummy，然后以dummy为prev,head为tail就开始翻转了。</p>\n<p><code>for(ListNode prev = dmy, tail = head; n &gt;= k; n -= k)</code>这块代码是将链表按k个一组开始进行翻转。</p>\n<p>里面的<code>for (int i = 1; i &lt; k; i++)</code>这里是从1开始而不是0开始，感觉会少循环一次。我是这么理解的，当有k个数，其实真正翻转的时候只会翻转k-1次，这里1是没问题的。</p>\n<p>具体的循环思路可以参考下图，画的有点乱，我相信你能看懂的~</p>\n<p><img src=\"foreach.jpg\"></p>\n<p>一开始prev和tail是相邻的，<code>tail.next.next=prev.next</code>其实就是指将tail的下一个节点指向prev的下一个节点，注意是tail的下一个节点不是tail。</p>\n<p>然后<code>prev.next=tail.next</code>是指prev指向tail的下一个节点。</p>\n<p><code>tail.next=next</code>是指tail指向原来tail.next.next位置，这里不直接用tail.next.next是因为这个指针现在已经断掉了，所以用实现保存好的next。</p>\n<p>在k个一组翻转完会将prev和tail进行重新赋值，在进行下一轮。</p>\n<p>最后返回的是最开始的head节点位置，只是由于head现在已经移动不知道到哪里去了，所以用的是dummy.next，其实就是最开始的head位置。</p>\n<h4 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h4><p>这三个解法主要掌握递归和迭代即可，栈那个其实没啥意义，时间复杂度太高，实际很难用到，除非什么特殊场景。</p>\n<p>迭代和递归写法其实都很绕，经常会出现今天会写，过一周看又有点不会了，所以多看多写吧，没啥办法，加油！</p>"},{"title":"LeetCode刷题日记-前K个高频元素","date":"2021-04-27T15:32:56.000Z","cagetories":"堆","_content":"\n前K个高频元素，这是一个很有代表性的问题，在实际生活中的应用场景其实也很多，比如微博里每天统计实时热点信息等。\n\n先看下题：\n\n```java\n给你一个整数数组 nums 和一个整数 k ，请你返回其中出现频率前 k 高的元素。你可以按 任意顺序 返回答案。\n\n示例 1:\n\n输入: nums = [1,1,1,2,2,3], k = 2\n输出: [1,2]\n\n进阶：你所设计算法的时间复杂度 必须 优于 O(n log n) ，其中 n 是数组大小。\n```\n\n<!-- more -->\n\n这道题的进阶要求时间复杂度要优于O(nlogn)，那一般的快排，归并等就可以抛弃了。\n\n而对于logn这个时间复杂度我们能很快速的联想到二分，二叉搜索树和堆。前两个想了下本场景适用不了。\n\n#### 运用堆\n\n因此我们来推导下堆是否可以小于O(nlogn)？答案是肯定的，堆可以在O(nlogk)(k<n)的时间复杂度下等到结果.\n\n#### 桶排序\n\n那除了堆，我们还有其他办法解决么？当然是有的，那就是桶排序。\n\n#### 思路\n\n我们来理一下为什么可以用堆和桶排序两种实现得到答案。我的推导过程如下，大家可以当做参考，有好的方案也欢迎和我讨论。\n\n首先要统计前k个高频元素，我们必须至少要将整个数组遍历一次。这个我们很快就想到Map去记录每个元素出现的次数，这个在**字母异位词**那题里面做过。\n\n然后需要去从Map里面的value进行排序，排序后从大到小的前k个元素就是结果。而造成解法差异就是在排序的实现上。\n\n你可以是各种排序，快排，归并，插入，桶，冒泡，希尔，堆排序等，而各种排序的时间复杂度决定了最后的时间复杂度。\n\n然后由于在各个排序里小于进阶要求O(nlogn)的就只有堆排序的O(nlogk)和桶排序的O(n).\n\n### 具体实现\n\n#### 堆\n\n#### 法一\n\n```java\n        int[] topK = new int[k];\n        Map<Integer, Integer> countMap = new HashMap<>();\n        //第一个为数组值，第二个为出现次数\n        PriorityQueue<int[]> priQueue = new PriorityQueue<>((o1,o2)->(o2[1]-o1[1]));\n\n        for (int num : nums) {\n            countMap.put(num, countMap.getOrDefault(num, 0) + 1);\n        }\n\n        for (Map.Entry<Integer, Integer> entry : countMap.entrySet()) {\n            int value = entry.getKey(), count = entry.getValue();\n\n            priQueue.offer(new int[]{value, count});\n        }\n\n        for (int i = 0; i < k; i++) {\n            topK[i] = priQueue.poll()[0];\n        }\n\n        return topK;\n```\n\n这个是我一开始写的一种错误的写法，应该是初学者比较容易犯的错误。**这个解法的时间复杂度是O(nlogn)而不是O(nlogk)**，至于为什么，看下一个解法我会说明。而且这里面`PriorityQueue`的泛型类型用的是`int[]`，这个写的其实还是有点不优雅的，没必要新开结构去记录，直接用现有的`Map.Entry<Integer,Integer>`即可。\n\n#### 法二\n\n```java\n        int[] topK = new int[k];\n        Map<Integer, Integer> countMap = new HashMap<>();\n        //第一个为数组值，第二个为出现次数\n        PriorityQueue<int[]> priQueue = new PriorityQueue<>((o1,o2)->(o1[1]-o2[1]));\n\n        for (int num : nums) {\n            countMap.put(num, countMap.getOrDefault(num, 0) + 1);\n        }\n\n        for (Map.Entry<Integer, Integer> entry : countMap.entrySet()) {\n            int value = entry.getKey(), count = entry.getValue();\n\n            //始终保持堆里只有k个元素，这样logk速度会快点\n            if (priQueue.size() < k) {\n                priQueue.offer(new int[]{value, count});\n            } else {\n                if (priQueue.peek()[1] < count) {\n                    priQueue.poll();\n                    priQueue.offer(new int[]{value, count});\n                }\n            }\n        }\n\n        for (int i = 0; i < k; i++) {\n            topK[i] = priQueue.poll()[0];\n        }\n\n        return topK;\n```\n\n法二和法一的区别在于，法一是构建大顶堆，将n个元素都装进堆`PriorityQueue`中，这样整个建堆的时间复杂度是O(nlogn)，而法二是构建小顶堆，然后保持堆里面的元素始终只有k个，大于k个会先将堆顶元素出堆在将其他元素入堆。\n\n**对于在O(nlogk)的复杂度到底用大顶堆还是小顶堆是怎么确定的呢？我是这么记得，如果是要得到前k大的数，那就要构建小顶堆，然后不断将大于堆顶的数放进小顶堆，最后堆里剩下的就是最大的k个数了；反之亦然。**\n\n#### 法三\n\n```java\n        if (nums.length == 0 || nums.length < k) {\n            return new int[]{};\n        }\n\n        Map<Integer, Integer> numsMap = new HashMap<>();\n        for (int num : nums) {\n            numsMap.put(num, numsMap.getOrDefault(num, 0) + 1);\n        }\n\n        PriorityQueue<Map.Entry<Integer, Integer>> pri = new PriorityQueue<>((o1, o2) -> o1.getValue() - o2.getValue());\n        for (Map.Entry<Integer, Integer> num : numsMap.entrySet()) {\n            if (pri.size() < k) {\n                pri.offer(num);\n            } else if (pri.peek().getValue() < num.getValue()) {\n                pri.poll();\n                pri.offer(num);\n            }\n        }\n\n        int[] res = new int[k];\n        for (int i = 0; i < k; i++) {\n            res[i] = pri.poll().getKey();\n        }\n\n\n        return res;\n```\n\n法三是`Map.Entry<Integer,Integer>`实现，这样代码会简洁很多，可读性好很多。\n\n下面发四是从其他地方看到的实现方法，看看和法三有什么不同呢？\n\n我一开始看到也想了一会才发现实现思路。\n\n#### 法四\n\n```java\n        Map<Integer, Integer> map = new HashMap();\n        for(int n : nums) {\n            int freq = map.getOrDefault(n, 0) + 1;\n            map.put(n, freq);\n        }\n        //这里是直接将map的entry做比较，这样就能有多个元素了，不用新建数组或者实体类\n        Queue<Map.Entry<Integer,Integer>> heap = new PriorityQueue<>((a, b) -> a.getValue() - b.getValue());\n        /**\n         * 这里也是维护一个小根堆，但是这里思路和正常有点区别，正常思路是会在k个元素满之后判断元素是否比堆顶大，然后出堆入堆，\n         * 这里实现有点不一样，是先入堆，然后在出堆堆顶元素，这里时间复杂度是O(nlog(k+1))，理论上说应该比O(nlogk)慢，\n         */\n        for(Map.Entry<Integer,Integer> entry: map.entrySet()) {\n            heap.offer(entry);\n            if(heap.size() > k) {\n                heap.poll();\n            }\n        }\n        int[] res = new int[k];\n        for(int i = 0; i < k; i++) {\n            res[i] = heap.poll().getKey();\n        }\n        return res;\n```\n\n这里的时间复杂度严格来说是O(nlog(k+1))，因为堆里会有k+1个元素，当检测到元素大于k会将堆顶最小元素出堆然后在入堆，这样省略了比较过程，但是时间复杂度高了点，在对性能要求不那么严格的时候也可以这种解法。\n\n#### 桶排序\n\n桶排序的思路是会用1-nums.length这么多个桶，然后遍历整个Map，把Map的Entry放进value的桶里，这时候一个桶可能有多个元素，然后依次从大到小将元素取出来即可。\n\n这里我一开始想的比较简单直接用一个数组代替一个桶，这样是不行的，桶可能会有多个元素，会存在覆盖的情况，之后再计数排序的场景可以用数组代替桶。\n\n```java\n        Map<Integer, Integer> countMap = new HashMap<>();\n        for (int num : nums) {\n            countMap.put(num, countMap.getOrDefault(num, 0) + 1);\n        }\n\n        //不能直接用数组记录，因为会存在多个数字出现次数一样，这种用数组会被覆盖\n        //因此直接在每个数组位置放一个list。\n        //桶的含义是每个出现次数包含的数字，桶里的元素是多个\n        //一个桶里会包含所有出现次数为该桶下标的数字\n        List<Integer>[] tong = new ArrayList[nums.length + 1];\n        for (Map.Entry<Integer, Integer> num : countMap.entrySet()) {\n            if (tong[num.getValue()]==null) tong[num.getValue()] = new ArrayList<>();\n            tong[num.getValue()].add(num.getKey());\n        }\n\n        int[] res = new int[k];\n        int index = 0;\n        //因为数组元素赋值是到了nums.length,因此是从nums.length而不是nums.length-1\n        for (int i = nums.length; i >= 0; i--) {\n            if (tong[i] == null) continue;\n            for (int n : tong[i]) {\n                res[index++] = n;\n                if (index == k) return res;\n            }\n        }\n\n        return res;\n```\n\n#### 写在最后\n\n我们在做题的时候不要仅仅追求做出来，而要把所有可能的解法都试试，然后比较优劣，对于一些速度比较慢的解法，看看是否能优化将其效率提高。\n\n有的时候你将一个算法的效率提升了十倍乃至几十倍，那种成就感是空前的！\n\n享受这种过程，你后面写出的有“坏味道”的代码会越来越少。","source":"_posts/LeetCode刷题日记-前K个高频元素.md","raw":"---\ntitle: LeetCode刷题日记-前K个高频元素\ndate: 2021-04-27 23:32:56\ntags: ['堆','哈希表','排序','桶']\ncagetories: '堆'\n---\n\n前K个高频元素，这是一个很有代表性的问题，在实际生活中的应用场景其实也很多，比如微博里每天统计实时热点信息等。\n\n先看下题：\n\n```java\n给你一个整数数组 nums 和一个整数 k ，请你返回其中出现频率前 k 高的元素。你可以按 任意顺序 返回答案。\n\n示例 1:\n\n输入: nums = [1,1,1,2,2,3], k = 2\n输出: [1,2]\n\n进阶：你所设计算法的时间复杂度 必须 优于 O(n log n) ，其中 n 是数组大小。\n```\n\n<!-- more -->\n\n这道题的进阶要求时间复杂度要优于O(nlogn)，那一般的快排，归并等就可以抛弃了。\n\n而对于logn这个时间复杂度我们能很快速的联想到二分，二叉搜索树和堆。前两个想了下本场景适用不了。\n\n#### 运用堆\n\n因此我们来推导下堆是否可以小于O(nlogn)？答案是肯定的，堆可以在O(nlogk)(k<n)的时间复杂度下等到结果.\n\n#### 桶排序\n\n那除了堆，我们还有其他办法解决么？当然是有的，那就是桶排序。\n\n#### 思路\n\n我们来理一下为什么可以用堆和桶排序两种实现得到答案。我的推导过程如下，大家可以当做参考，有好的方案也欢迎和我讨论。\n\n首先要统计前k个高频元素，我们必须至少要将整个数组遍历一次。这个我们很快就想到Map去记录每个元素出现的次数，这个在**字母异位词**那题里面做过。\n\n然后需要去从Map里面的value进行排序，排序后从大到小的前k个元素就是结果。而造成解法差异就是在排序的实现上。\n\n你可以是各种排序，快排，归并，插入，桶，冒泡，希尔，堆排序等，而各种排序的时间复杂度决定了最后的时间复杂度。\n\n然后由于在各个排序里小于进阶要求O(nlogn)的就只有堆排序的O(nlogk)和桶排序的O(n).\n\n### 具体实现\n\n#### 堆\n\n#### 法一\n\n```java\n        int[] topK = new int[k];\n        Map<Integer, Integer> countMap = new HashMap<>();\n        //第一个为数组值，第二个为出现次数\n        PriorityQueue<int[]> priQueue = new PriorityQueue<>((o1,o2)->(o2[1]-o1[1]));\n\n        for (int num : nums) {\n            countMap.put(num, countMap.getOrDefault(num, 0) + 1);\n        }\n\n        for (Map.Entry<Integer, Integer> entry : countMap.entrySet()) {\n            int value = entry.getKey(), count = entry.getValue();\n\n            priQueue.offer(new int[]{value, count});\n        }\n\n        for (int i = 0; i < k; i++) {\n            topK[i] = priQueue.poll()[0];\n        }\n\n        return topK;\n```\n\n这个是我一开始写的一种错误的写法，应该是初学者比较容易犯的错误。**这个解法的时间复杂度是O(nlogn)而不是O(nlogk)**，至于为什么，看下一个解法我会说明。而且这里面`PriorityQueue`的泛型类型用的是`int[]`，这个写的其实还是有点不优雅的，没必要新开结构去记录，直接用现有的`Map.Entry<Integer,Integer>`即可。\n\n#### 法二\n\n```java\n        int[] topK = new int[k];\n        Map<Integer, Integer> countMap = new HashMap<>();\n        //第一个为数组值，第二个为出现次数\n        PriorityQueue<int[]> priQueue = new PriorityQueue<>((o1,o2)->(o1[1]-o2[1]));\n\n        for (int num : nums) {\n            countMap.put(num, countMap.getOrDefault(num, 0) + 1);\n        }\n\n        for (Map.Entry<Integer, Integer> entry : countMap.entrySet()) {\n            int value = entry.getKey(), count = entry.getValue();\n\n            //始终保持堆里只有k个元素，这样logk速度会快点\n            if (priQueue.size() < k) {\n                priQueue.offer(new int[]{value, count});\n            } else {\n                if (priQueue.peek()[1] < count) {\n                    priQueue.poll();\n                    priQueue.offer(new int[]{value, count});\n                }\n            }\n        }\n\n        for (int i = 0; i < k; i++) {\n            topK[i] = priQueue.poll()[0];\n        }\n\n        return topK;\n```\n\n法二和法一的区别在于，法一是构建大顶堆，将n个元素都装进堆`PriorityQueue`中，这样整个建堆的时间复杂度是O(nlogn)，而法二是构建小顶堆，然后保持堆里面的元素始终只有k个，大于k个会先将堆顶元素出堆在将其他元素入堆。\n\n**对于在O(nlogk)的复杂度到底用大顶堆还是小顶堆是怎么确定的呢？我是这么记得，如果是要得到前k大的数，那就要构建小顶堆，然后不断将大于堆顶的数放进小顶堆，最后堆里剩下的就是最大的k个数了；反之亦然。**\n\n#### 法三\n\n```java\n        if (nums.length == 0 || nums.length < k) {\n            return new int[]{};\n        }\n\n        Map<Integer, Integer> numsMap = new HashMap<>();\n        for (int num : nums) {\n            numsMap.put(num, numsMap.getOrDefault(num, 0) + 1);\n        }\n\n        PriorityQueue<Map.Entry<Integer, Integer>> pri = new PriorityQueue<>((o1, o2) -> o1.getValue() - o2.getValue());\n        for (Map.Entry<Integer, Integer> num : numsMap.entrySet()) {\n            if (pri.size() < k) {\n                pri.offer(num);\n            } else if (pri.peek().getValue() < num.getValue()) {\n                pri.poll();\n                pri.offer(num);\n            }\n        }\n\n        int[] res = new int[k];\n        for (int i = 0; i < k; i++) {\n            res[i] = pri.poll().getKey();\n        }\n\n\n        return res;\n```\n\n法三是`Map.Entry<Integer,Integer>`实现，这样代码会简洁很多，可读性好很多。\n\n下面发四是从其他地方看到的实现方法，看看和法三有什么不同呢？\n\n我一开始看到也想了一会才发现实现思路。\n\n#### 法四\n\n```java\n        Map<Integer, Integer> map = new HashMap();\n        for(int n : nums) {\n            int freq = map.getOrDefault(n, 0) + 1;\n            map.put(n, freq);\n        }\n        //这里是直接将map的entry做比较，这样就能有多个元素了，不用新建数组或者实体类\n        Queue<Map.Entry<Integer,Integer>> heap = new PriorityQueue<>((a, b) -> a.getValue() - b.getValue());\n        /**\n         * 这里也是维护一个小根堆，但是这里思路和正常有点区别，正常思路是会在k个元素满之后判断元素是否比堆顶大，然后出堆入堆，\n         * 这里实现有点不一样，是先入堆，然后在出堆堆顶元素，这里时间复杂度是O(nlog(k+1))，理论上说应该比O(nlogk)慢，\n         */\n        for(Map.Entry<Integer,Integer> entry: map.entrySet()) {\n            heap.offer(entry);\n            if(heap.size() > k) {\n                heap.poll();\n            }\n        }\n        int[] res = new int[k];\n        for(int i = 0; i < k; i++) {\n            res[i] = heap.poll().getKey();\n        }\n        return res;\n```\n\n这里的时间复杂度严格来说是O(nlog(k+1))，因为堆里会有k+1个元素，当检测到元素大于k会将堆顶最小元素出堆然后在入堆，这样省略了比较过程，但是时间复杂度高了点，在对性能要求不那么严格的时候也可以这种解法。\n\n#### 桶排序\n\n桶排序的思路是会用1-nums.length这么多个桶，然后遍历整个Map，把Map的Entry放进value的桶里，这时候一个桶可能有多个元素，然后依次从大到小将元素取出来即可。\n\n这里我一开始想的比较简单直接用一个数组代替一个桶，这样是不行的，桶可能会有多个元素，会存在覆盖的情况，之后再计数排序的场景可以用数组代替桶。\n\n```java\n        Map<Integer, Integer> countMap = new HashMap<>();\n        for (int num : nums) {\n            countMap.put(num, countMap.getOrDefault(num, 0) + 1);\n        }\n\n        //不能直接用数组记录，因为会存在多个数字出现次数一样，这种用数组会被覆盖\n        //因此直接在每个数组位置放一个list。\n        //桶的含义是每个出现次数包含的数字，桶里的元素是多个\n        //一个桶里会包含所有出现次数为该桶下标的数字\n        List<Integer>[] tong = new ArrayList[nums.length + 1];\n        for (Map.Entry<Integer, Integer> num : countMap.entrySet()) {\n            if (tong[num.getValue()]==null) tong[num.getValue()] = new ArrayList<>();\n            tong[num.getValue()].add(num.getKey());\n        }\n\n        int[] res = new int[k];\n        int index = 0;\n        //因为数组元素赋值是到了nums.length,因此是从nums.length而不是nums.length-1\n        for (int i = nums.length; i >= 0; i--) {\n            if (tong[i] == null) continue;\n            for (int n : tong[i]) {\n                res[index++] = n;\n                if (index == k) return res;\n            }\n        }\n\n        return res;\n```\n\n#### 写在最后\n\n我们在做题的时候不要仅仅追求做出来，而要把所有可能的解法都试试，然后比较优劣，对于一些速度比较慢的解法，看看是否能优化将其效率提高。\n\n有的时候你将一个算法的效率提升了十倍乃至几十倍，那种成就感是空前的！\n\n享受这种过程，你后面写出的有“坏味道”的代码会越来越少。","slug":"LeetCode刷题日记-前K个高频元素","published":1,"updated":"2021-04-27T16:39:14.358Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckod3078j0006nwtb9t62784r","content":"<p>前K个高频元素，这是一个很有代表性的问题，在实际生活中的应用场景其实也很多，比如微博里每天统计实时热点信息等。</p>\n<p>先看下题：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">给你一个整数数组 nums 和一个整数 k ，请你返回其中出现频率前 k 高的元素。你可以按 任意顺序 返回答案。</span><br><span class=\"line\"></span><br><span class=\"line\">示例 <span class=\"number\">1</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">输入: nums = [<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>], k = <span class=\"number\">2</span></span><br><span class=\"line\">输出: [<span class=\"number\">1</span>,<span class=\"number\">2</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">进阶：你所设计算法的时间复杂度 必须 优于 O(n log n) ，其中 n 是数组大小。</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<p>这道题的进阶要求时间复杂度要优于O(nlogn)，那一般的快排，归并等就可以抛弃了。</p>\n<p>而对于logn这个时间复杂度我们能很快速的联想到二分，二叉搜索树和堆。前两个想了下本场景适用不了。</p>\n<h4 id=\"运用堆\"><a href=\"#运用堆\" class=\"headerlink\" title=\"运用堆\"></a>运用堆</h4><p>因此我们来推导下堆是否可以小于O(nlogn)？答案是肯定的，堆可以在O(nlogk)(k&lt;n)的时间复杂度下等到结果.</p>\n<h4 id=\"桶排序\"><a href=\"#桶排序\" class=\"headerlink\" title=\"桶排序\"></a>桶排序</h4><p>那除了堆，我们还有其他办法解决么？当然是有的，那就是桶排序。</p>\n<h4 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4><p>我们来理一下为什么可以用堆和桶排序两种实现得到答案。我的推导过程如下，大家可以当做参考，有好的方案也欢迎和我讨论。</p>\n<p>首先要统计前k个高频元素，我们必须至少要将整个数组遍历一次。这个我们很快就想到Map去记录每个元素出现的次数，这个在<strong>字母异位词</strong>那题里面做过。</p>\n<p>然后需要去从Map里面的value进行排序，排序后从大到小的前k个元素就是结果。而造成解法差异就是在排序的实现上。</p>\n<p>你可以是各种排序，快排，归并，插入，桶，冒泡，希尔，堆排序等，而各种排序的时间复杂度决定了最后的时间复杂度。</p>\n<p>然后由于在各个排序里小于进阶要求O(nlogn)的就只有堆排序的O(nlogk)和桶排序的O(n).</p>\n<h3 id=\"具体实现\"><a href=\"#具体实现\" class=\"headerlink\" title=\"具体实现\"></a>具体实现</h3><h4 id=\"堆\"><a href=\"#堆\" class=\"headerlink\" title=\"堆\"></a>堆</h4><h4 id=\"法一\"><a href=\"#法一\" class=\"headerlink\" title=\"法一\"></a>法一</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span>[] topK = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[k];</span><br><span class=\"line\">Map&lt;Integer, Integer&gt; countMap = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\"><span class=\"comment\">//第一个为数组值，第二个为出现次数</span></span><br><span class=\"line\">PriorityQueue&lt;<span class=\"keyword\">int</span>[]&gt; priQueue = <span class=\"keyword\">new</span> PriorityQueue&lt;&gt;((o1,o2)-&gt;(o2[<span class=\"number\">1</span>]-o1[<span class=\"number\">1</span>]));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> num : nums) &#123;</span><br><span class=\"line\">    countMap.put(num, countMap.getOrDefault(num, <span class=\"number\">0</span>) + <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (Map.Entry&lt;Integer, Integer&gt; entry : countMap.entrySet()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> value = entry.getKey(), count = entry.getValue();</span><br><span class=\"line\"></span><br><span class=\"line\">    priQueue.offer(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;value, count&#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; k; i++) &#123;</span><br><span class=\"line\">    topK[i] = priQueue.poll()[<span class=\"number\">0</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> topK;</span><br></pre></td></tr></table></figure>\n\n<p>这个是我一开始写的一种错误的写法，应该是初学者比较容易犯的错误。**这个解法的时间复杂度是O(nlogn)而不是O(nlogk)**，至于为什么，看下一个解法我会说明。而且这里面<code>PriorityQueue</code>的泛型类型用的是<code>int[]</code>，这个写的其实还是有点不优雅的，没必要新开结构去记录，直接用现有的<code>Map.Entry&lt;Integer,Integer&gt;</code>即可。</p>\n<h4 id=\"法二\"><a href=\"#法二\" class=\"headerlink\" title=\"法二\"></a>法二</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span>[] topK = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[k];</span><br><span class=\"line\">Map&lt;Integer, Integer&gt; countMap = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\"><span class=\"comment\">//第一个为数组值，第二个为出现次数</span></span><br><span class=\"line\">PriorityQueue&lt;<span class=\"keyword\">int</span>[]&gt; priQueue = <span class=\"keyword\">new</span> PriorityQueue&lt;&gt;((o1,o2)-&gt;(o1[<span class=\"number\">1</span>]-o2[<span class=\"number\">1</span>]));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> num : nums) &#123;</span><br><span class=\"line\">    countMap.put(num, countMap.getOrDefault(num, <span class=\"number\">0</span>) + <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (Map.Entry&lt;Integer, Integer&gt; entry : countMap.entrySet()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> value = entry.getKey(), count = entry.getValue();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//始终保持堆里只有k个元素，这样logk速度会快点</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (priQueue.size() &lt; k) &#123;</span><br><span class=\"line\">        priQueue.offer(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;value, count&#125;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (priQueue.peek()[<span class=\"number\">1</span>] &lt; count) &#123;</span><br><span class=\"line\">            priQueue.poll();</span><br><span class=\"line\">            priQueue.offer(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;value, count&#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; k; i++) &#123;</span><br><span class=\"line\">    topK[i] = priQueue.poll()[<span class=\"number\">0</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> topK;</span><br></pre></td></tr></table></figure>\n\n<p>法二和法一的区别在于，法一是构建大顶堆，将n个元素都装进堆<code>PriorityQueue</code>中，这样整个建堆的时间复杂度是O(nlogn)，而法二是构建小顶堆，然后保持堆里面的元素始终只有k个，大于k个会先将堆顶元素出堆在将其他元素入堆。</p>\n<p><strong>对于在O(nlogk)的复杂度到底用大顶堆还是小顶堆是怎么确定的呢？我是这么记得，如果是要得到前k大的数，那就要构建小顶堆，然后不断将大于堆顶的数放进小顶堆，最后堆里剩下的就是最大的k个数了；反之亦然。</strong></p>\n<h4 id=\"法三\"><a href=\"#法三\" class=\"headerlink\" title=\"法三\"></a>法三</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (nums.length == <span class=\"number\">0</span> || nums.length &lt; k) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Map&lt;Integer, Integer&gt; numsMap = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> num : nums) &#123;</span><br><span class=\"line\">    numsMap.put(num, numsMap.getOrDefault(num, <span class=\"number\">0</span>) + <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">PriorityQueue&lt;Map.Entry&lt;Integer, Integer&gt;&gt; pri = <span class=\"keyword\">new</span> PriorityQueue&lt;&gt;((o1, o2) -&gt; o1.getValue() - o2.getValue());</span><br><span class=\"line\"><span class=\"keyword\">for</span> (Map.Entry&lt;Integer, Integer&gt; num : numsMap.entrySet()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pri.size() &lt; k) &#123;</span><br><span class=\"line\">        pri.offer(num);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (pri.peek().getValue() &lt; num.getValue()) &#123;</span><br><span class=\"line\">        pri.poll();</span><br><span class=\"line\">        pri.offer(num);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span>[] res = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[k];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; k; i++) &#123;</span><br><span class=\"line\">    res[i] = pri.poll().getKey();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> res;</span><br></pre></td></tr></table></figure>\n\n<p>法三是<code>Map.Entry&lt;Integer,Integer&gt;</code>实现，这样代码会简洁很多，可读性好很多。</p>\n<p>下面发四是从其他地方看到的实现方法，看看和法三有什么不同呢？</p>\n<p>我一开始看到也想了一会才发现实现思路。</p>\n<h4 id=\"法四\"><a href=\"#法四\" class=\"headerlink\" title=\"法四\"></a>法四</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map&lt;Integer, Integer&gt; map = <span class=\"keyword\">new</span> HashMap();</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> n : nums) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> freq = map.getOrDefault(n, <span class=\"number\">0</span>) + <span class=\"number\">1</span>;</span><br><span class=\"line\">    map.put(n, freq);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//这里是直接将map的entry做比较，这样就能有多个元素了，不用新建数组或者实体类</span></span><br><span class=\"line\">Queue&lt;Map.Entry&lt;Integer,Integer&gt;&gt; heap = <span class=\"keyword\">new</span> PriorityQueue&lt;&gt;((a, b) -&gt; a.getValue() - b.getValue());</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 这里也是维护一个小根堆，但是这里思路和正常有点区别，正常思路是会在k个元素满之后判断元素是否比堆顶大，然后出堆入堆，</span></span><br><span class=\"line\"><span class=\"comment\"> * 这里实现有点不一样，是先入堆，然后在出堆堆顶元素，这里时间复杂度是O(nlog(k+1))，理论上说应该比O(nlogk)慢，</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(Map.Entry&lt;Integer,Integer&gt; entry: map.entrySet()) &#123;</span><br><span class=\"line\">    heap.offer(entry);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(heap.size() &gt; k) &#123;</span><br><span class=\"line\">        heap.poll();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">int</span>[] res = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[k];</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; k; i++) &#123;</span><br><span class=\"line\">    res[i] = heap.poll().getKey();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> res;</span><br></pre></td></tr></table></figure>\n\n<p>这里的时间复杂度严格来说是O(nlog(k+1))，因为堆里会有k+1个元素，当检测到元素大于k会将堆顶最小元素出堆然后在入堆，这样省略了比较过程，但是时间复杂度高了点，在对性能要求不那么严格的时候也可以这种解法。</p>\n<h4 id=\"桶排序-1\"><a href=\"#桶排序-1\" class=\"headerlink\" title=\"桶排序\"></a>桶排序</h4><p>桶排序的思路是会用1-nums.length这么多个桶，然后遍历整个Map，把Map的Entry放进value的桶里，这时候一个桶可能有多个元素，然后依次从大到小将元素取出来即可。</p>\n<p>这里我一开始想的比较简单直接用一个数组代替一个桶，这样是不行的，桶可能会有多个元素，会存在覆盖的情况，之后再计数排序的场景可以用数组代替桶。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map&lt;Integer, Integer&gt; countMap = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> num : nums) &#123;</span><br><span class=\"line\">    countMap.put(num, countMap.getOrDefault(num, <span class=\"number\">0</span>) + <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//不能直接用数组记录，因为会存在多个数字出现次数一样，这种用数组会被覆盖</span></span><br><span class=\"line\"><span class=\"comment\">//因此直接在每个数组位置放一个list。</span></span><br><span class=\"line\"><span class=\"comment\">//桶的含义是每个出现次数包含的数字，桶里的元素是多个</span></span><br><span class=\"line\"><span class=\"comment\">//一个桶里会包含所有出现次数为该桶下标的数字</span></span><br><span class=\"line\">List&lt;Integer&gt;[] tong = <span class=\"keyword\">new</span> ArrayList[nums.length + <span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (Map.Entry&lt;Integer, Integer&gt; num : countMap.entrySet()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tong[num.getValue()]==<span class=\"keyword\">null</span>) tong[num.getValue()] = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    tong[num.getValue()].add(num.getKey());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span>[] res = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[k];</span><br><span class=\"line\"><span class=\"keyword\">int</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"comment\">//因为数组元素赋值是到了nums.length,因此是从nums.length而不是nums.length-1</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = nums.length; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tong[i] == <span class=\"keyword\">null</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> n : tong[i]) &#123;</span><br><span class=\"line\">        res[index++] = n;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index == k) <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> res;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h4><p>我们在做题的时候不要仅仅追求做出来，而要把所有可能的解法都试试，然后比较优劣，对于一些速度比较慢的解法，看看是否能优化将其效率提高。</p>\n<p>有的时候你将一个算法的效率提升了十倍乃至几十倍，那种成就感是空前的！</p>\n<p>享受这种过程，你后面写出的有“坏味道”的代码会越来越少。</p>\n","site":{"data":{}},"excerpt":"<p>前K个高频元素，这是一个很有代表性的问题，在实际生活中的应用场景其实也很多，比如微博里每天统计实时热点信息等。</p>\n<p>先看下题：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">给你一个整数数组 nums 和一个整数 k ，请你返回其中出现频率前 k 高的元素。你可以按 任意顺序 返回答案。</span><br><span class=\"line\"></span><br><span class=\"line\">示例 <span class=\"number\">1</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">输入: nums = [<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>], k = <span class=\"number\">2</span></span><br><span class=\"line\">输出: [<span class=\"number\">1</span>,<span class=\"number\">2</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">进阶：你所设计算法的时间复杂度 必须 优于 O(n log n) ，其中 n 是数组大小。</span><br></pre></td></tr></table></figure>","more":"<p>这道题的进阶要求时间复杂度要优于O(nlogn)，那一般的快排，归并等就可以抛弃了。</p>\n<p>而对于logn这个时间复杂度我们能很快速的联想到二分，二叉搜索树和堆。前两个想了下本场景适用不了。</p>\n<h4 id=\"运用堆\"><a href=\"#运用堆\" class=\"headerlink\" title=\"运用堆\"></a>运用堆</h4><p>因此我们来推导下堆是否可以小于O(nlogn)？答案是肯定的，堆可以在O(nlogk)(k&lt;n)的时间复杂度下等到结果.</p>\n<h4 id=\"桶排序\"><a href=\"#桶排序\" class=\"headerlink\" title=\"桶排序\"></a>桶排序</h4><p>那除了堆，我们还有其他办法解决么？当然是有的，那就是桶排序。</p>\n<h4 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4><p>我们来理一下为什么可以用堆和桶排序两种实现得到答案。我的推导过程如下，大家可以当做参考，有好的方案也欢迎和我讨论。</p>\n<p>首先要统计前k个高频元素，我们必须至少要将整个数组遍历一次。这个我们很快就想到Map去记录每个元素出现的次数，这个在<strong>字母异位词</strong>那题里面做过。</p>\n<p>然后需要去从Map里面的value进行排序，排序后从大到小的前k个元素就是结果。而造成解法差异就是在排序的实现上。</p>\n<p>你可以是各种排序，快排，归并，插入，桶，冒泡，希尔，堆排序等，而各种排序的时间复杂度决定了最后的时间复杂度。</p>\n<p>然后由于在各个排序里小于进阶要求O(nlogn)的就只有堆排序的O(nlogk)和桶排序的O(n).</p>\n<h3 id=\"具体实现\"><a href=\"#具体实现\" class=\"headerlink\" title=\"具体实现\"></a>具体实现</h3><h4 id=\"堆\"><a href=\"#堆\" class=\"headerlink\" title=\"堆\"></a>堆</h4><h4 id=\"法一\"><a href=\"#法一\" class=\"headerlink\" title=\"法一\"></a>法一</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span>[] topK = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[k];</span><br><span class=\"line\">Map&lt;Integer, Integer&gt; countMap = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\"><span class=\"comment\">//第一个为数组值，第二个为出现次数</span></span><br><span class=\"line\">PriorityQueue&lt;<span class=\"keyword\">int</span>[]&gt; priQueue = <span class=\"keyword\">new</span> PriorityQueue&lt;&gt;((o1,o2)-&gt;(o2[<span class=\"number\">1</span>]-o1[<span class=\"number\">1</span>]));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> num : nums) &#123;</span><br><span class=\"line\">    countMap.put(num, countMap.getOrDefault(num, <span class=\"number\">0</span>) + <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (Map.Entry&lt;Integer, Integer&gt; entry : countMap.entrySet()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> value = entry.getKey(), count = entry.getValue();</span><br><span class=\"line\"></span><br><span class=\"line\">    priQueue.offer(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;value, count&#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; k; i++) &#123;</span><br><span class=\"line\">    topK[i] = priQueue.poll()[<span class=\"number\">0</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> topK;</span><br></pre></td></tr></table></figure>\n\n<p>这个是我一开始写的一种错误的写法，应该是初学者比较容易犯的错误。**这个解法的时间复杂度是O(nlogn)而不是O(nlogk)**，至于为什么，看下一个解法我会说明。而且这里面<code>PriorityQueue</code>的泛型类型用的是<code>int[]</code>，这个写的其实还是有点不优雅的，没必要新开结构去记录，直接用现有的<code>Map.Entry&lt;Integer,Integer&gt;</code>即可。</p>\n<h4 id=\"法二\"><a href=\"#法二\" class=\"headerlink\" title=\"法二\"></a>法二</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span>[] topK = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[k];</span><br><span class=\"line\">Map&lt;Integer, Integer&gt; countMap = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\"><span class=\"comment\">//第一个为数组值，第二个为出现次数</span></span><br><span class=\"line\">PriorityQueue&lt;<span class=\"keyword\">int</span>[]&gt; priQueue = <span class=\"keyword\">new</span> PriorityQueue&lt;&gt;((o1,o2)-&gt;(o1[<span class=\"number\">1</span>]-o2[<span class=\"number\">1</span>]));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> num : nums) &#123;</span><br><span class=\"line\">    countMap.put(num, countMap.getOrDefault(num, <span class=\"number\">0</span>) + <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (Map.Entry&lt;Integer, Integer&gt; entry : countMap.entrySet()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> value = entry.getKey(), count = entry.getValue();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//始终保持堆里只有k个元素，这样logk速度会快点</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (priQueue.size() &lt; k) &#123;</span><br><span class=\"line\">        priQueue.offer(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;value, count&#125;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (priQueue.peek()[<span class=\"number\">1</span>] &lt; count) &#123;</span><br><span class=\"line\">            priQueue.poll();</span><br><span class=\"line\">            priQueue.offer(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;value, count&#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; k; i++) &#123;</span><br><span class=\"line\">    topK[i] = priQueue.poll()[<span class=\"number\">0</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> topK;</span><br></pre></td></tr></table></figure>\n\n<p>法二和法一的区别在于，法一是构建大顶堆，将n个元素都装进堆<code>PriorityQueue</code>中，这样整个建堆的时间复杂度是O(nlogn)，而法二是构建小顶堆，然后保持堆里面的元素始终只有k个，大于k个会先将堆顶元素出堆在将其他元素入堆。</p>\n<p><strong>对于在O(nlogk)的复杂度到底用大顶堆还是小顶堆是怎么确定的呢？我是这么记得，如果是要得到前k大的数，那就要构建小顶堆，然后不断将大于堆顶的数放进小顶堆，最后堆里剩下的就是最大的k个数了；反之亦然。</strong></p>\n<h4 id=\"法三\"><a href=\"#法三\" class=\"headerlink\" title=\"法三\"></a>法三</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (nums.length == <span class=\"number\">0</span> || nums.length &lt; k) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Map&lt;Integer, Integer&gt; numsMap = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> num : nums) &#123;</span><br><span class=\"line\">    numsMap.put(num, numsMap.getOrDefault(num, <span class=\"number\">0</span>) + <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">PriorityQueue&lt;Map.Entry&lt;Integer, Integer&gt;&gt; pri = <span class=\"keyword\">new</span> PriorityQueue&lt;&gt;((o1, o2) -&gt; o1.getValue() - o2.getValue());</span><br><span class=\"line\"><span class=\"keyword\">for</span> (Map.Entry&lt;Integer, Integer&gt; num : numsMap.entrySet()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pri.size() &lt; k) &#123;</span><br><span class=\"line\">        pri.offer(num);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (pri.peek().getValue() &lt; num.getValue()) &#123;</span><br><span class=\"line\">        pri.poll();</span><br><span class=\"line\">        pri.offer(num);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span>[] res = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[k];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; k; i++) &#123;</span><br><span class=\"line\">    res[i] = pri.poll().getKey();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> res;</span><br></pre></td></tr></table></figure>\n\n<p>法三是<code>Map.Entry&lt;Integer,Integer&gt;</code>实现，这样代码会简洁很多，可读性好很多。</p>\n<p>下面发四是从其他地方看到的实现方法，看看和法三有什么不同呢？</p>\n<p>我一开始看到也想了一会才发现实现思路。</p>\n<h4 id=\"法四\"><a href=\"#法四\" class=\"headerlink\" title=\"法四\"></a>法四</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map&lt;Integer, Integer&gt; map = <span class=\"keyword\">new</span> HashMap();</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> n : nums) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> freq = map.getOrDefault(n, <span class=\"number\">0</span>) + <span class=\"number\">1</span>;</span><br><span class=\"line\">    map.put(n, freq);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//这里是直接将map的entry做比较，这样就能有多个元素了，不用新建数组或者实体类</span></span><br><span class=\"line\">Queue&lt;Map.Entry&lt;Integer,Integer&gt;&gt; heap = <span class=\"keyword\">new</span> PriorityQueue&lt;&gt;((a, b) -&gt; a.getValue() - b.getValue());</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 这里也是维护一个小根堆，但是这里思路和正常有点区别，正常思路是会在k个元素满之后判断元素是否比堆顶大，然后出堆入堆，</span></span><br><span class=\"line\"><span class=\"comment\"> * 这里实现有点不一样，是先入堆，然后在出堆堆顶元素，这里时间复杂度是O(nlog(k+1))，理论上说应该比O(nlogk)慢，</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(Map.Entry&lt;Integer,Integer&gt; entry: map.entrySet()) &#123;</span><br><span class=\"line\">    heap.offer(entry);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(heap.size() &gt; k) &#123;</span><br><span class=\"line\">        heap.poll();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">int</span>[] res = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[k];</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; k; i++) &#123;</span><br><span class=\"line\">    res[i] = heap.poll().getKey();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> res;</span><br></pre></td></tr></table></figure>\n\n<p>这里的时间复杂度严格来说是O(nlog(k+1))，因为堆里会有k+1个元素，当检测到元素大于k会将堆顶最小元素出堆然后在入堆，这样省略了比较过程，但是时间复杂度高了点，在对性能要求不那么严格的时候也可以这种解法。</p>\n<h4 id=\"桶排序-1\"><a href=\"#桶排序-1\" class=\"headerlink\" title=\"桶排序\"></a>桶排序</h4><p>桶排序的思路是会用1-nums.length这么多个桶，然后遍历整个Map，把Map的Entry放进value的桶里，这时候一个桶可能有多个元素，然后依次从大到小将元素取出来即可。</p>\n<p>这里我一开始想的比较简单直接用一个数组代替一个桶，这样是不行的，桶可能会有多个元素，会存在覆盖的情况，之后再计数排序的场景可以用数组代替桶。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map&lt;Integer, Integer&gt; countMap = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> num : nums) &#123;</span><br><span class=\"line\">    countMap.put(num, countMap.getOrDefault(num, <span class=\"number\">0</span>) + <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//不能直接用数组记录，因为会存在多个数字出现次数一样，这种用数组会被覆盖</span></span><br><span class=\"line\"><span class=\"comment\">//因此直接在每个数组位置放一个list。</span></span><br><span class=\"line\"><span class=\"comment\">//桶的含义是每个出现次数包含的数字，桶里的元素是多个</span></span><br><span class=\"line\"><span class=\"comment\">//一个桶里会包含所有出现次数为该桶下标的数字</span></span><br><span class=\"line\">List&lt;Integer&gt;[] tong = <span class=\"keyword\">new</span> ArrayList[nums.length + <span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (Map.Entry&lt;Integer, Integer&gt; num : countMap.entrySet()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tong[num.getValue()]==<span class=\"keyword\">null</span>) tong[num.getValue()] = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    tong[num.getValue()].add(num.getKey());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span>[] res = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[k];</span><br><span class=\"line\"><span class=\"keyword\">int</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"comment\">//因为数组元素赋值是到了nums.length,因此是从nums.length而不是nums.length-1</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = nums.length; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tong[i] == <span class=\"keyword\">null</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> n : tong[i]) &#123;</span><br><span class=\"line\">        res[index++] = n;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index == k) <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> res;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h4><p>我们在做题的时候不要仅仅追求做出来，而要把所有可能的解法都试试，然后比较优劣，对于一些速度比较慢的解法，看看是否能优化将其效率提高。</p>\n<p>有的时候你将一个算法的效率提升了十倍乃至几十倍，那种成就感是空前的！</p>\n<p>享受这种过程，你后面写出的有“坏味道”的代码会越来越少。</p>"},{"title":"LeetCode刷题日记-柱状图中的最大面积","date":"2021-04-22T16:02:34.000Z","cagetories":"栈","_content":"\nLeetCode第84题，运用单调递增栈求柱状图的最大面积，这个思想还是很巧妙的，记录下解题思路。\n\n首先，膜拜下能想出用栈解这道题的人，真的对栈这种数据结构理解太深了。我不看别人题解我是基本想不出来这玩意还能用栈来解的。\n\n但是当你看懂其实思路还是很简单的。\n\n请跟着我的思路一起看下这个结果是怎么出来的，要求柱状图面积，那一定需要知道左右边界和高度，我们先手动维护一个单调递增的栈。这个栈能有什么用呢？\n\n<!-- more -->\n\n它会有一个特性，当第一个小于栈顶元素出现时，我们能算出栈里所有比当前元素大的以栈顶元素为右边界的这个柱子的最大面积，左边界怎么算呢，就是第二个栈顶元素+1，高度就是左右边界的最小高度。值为什么能这么算呢，因为栈是递增的，如果有比第二个栈顶元素小的元素时，它一定是被弹出去了。（这个可能有点不那么好思考，建议多写几遍或者debug一下）\n\n接下来看下代码：\n\n```java\n        int len = heights.length;\n        int maxArea = 0;\n        Stack<Integer> stack = new Stack<>();\n        //这里能等于n的原因是当i=n-1的时候栈里还会有最后一个元素，因此需要构造一个最小的n把栈里剩余其他元素拿出来\n        for (int i = 0; i <= len;) {\n            //等于n需要特殊处理\n            int h = (i == len ? 0 : heights[i]);\n            //维护一个单调递增栈，如果压栈元素比栈顶元素大，直接压入栈中，否则依次将比它大的元素取出\n            if (stack.isEmpty() || h >= heights[stack.peek()]) {\n                stack.push(i);\n                i++;\n            }else {\n                int curHeight = heights[stack.pop()];\n                int rightBoundary = i - 1;\n                int leftBoundary = stack.isEmpty() ? 0 : stack.peek() + 1;\n                int width = rightBoundary - leftBoundary + 1;\n                maxArea = Math.max(maxArea, (curHeight * width));\n            }\n        }\n        return maxArea;\n```\n\n解释下这块代码，我们一开始初始化了一个栈，和一个最大值，然后开始遍历柱子。\n\n**注意这里的 `for (int i = 0; i <= len;)` 是没有i++,i--这种迭代条件的**，为啥呢，因为这里只有在压栈的时候需要下标前移，如果出栈的话下标是不会动的。当然你也可以写成`for (int i = 0; i <= len;i++)`，那里面的`else`部分代码就需要写成while循环，以保证出栈计算面积的时候指针不会移动，看自己代码喜好吧，我看这种if,else感觉更清晰点。\n\n而且这里的i是能到n的，这样相当于循环了n+1次，这样是为了将最后的栈里元素出栈做的特殊操作。\n\n当i==n的时候，h就是0，代表一个最小值，然后把栈里面的元素全部压出来，否则就是正常的height[i]值。\n\n入栈的条件是栈为空或者栈顶元素小于等于height[i]，压栈之后指针要后移。\n\n当栈顶元素比height[i]大的时候，就可以计算柱状图的面积了，高度就是height[stack.pop()]，右边界i-1，左边界根据栈是否为空，空就是0，否则就是下一个栈顶元素+1,注意这时候第一个栈顶元素已经弹出来了，\n\n注意面积是right-left+1，这个你看柱状图就能看出来，比如6-5=1,其实是5,6两根柱子，所以要+1。\n\n然后面积就是height[stack.pop()]*(right-left+1),在用max每次拿到最大值即可。\n\n其实你写多了感觉这个实现不是很难，**难的是能把这个方法想出来的人**。\n\n上面是使用的系统自带的双端队列作为栈，但是由于做了一定的封装，其实效率并不高，因此在LeetCode提交时能打败的人其实不多，只有25%好像。\n\n那我们来优化一下，25确实太低了。\n\n优化的点是什么呢？你需要先记住一个结论，我LeetCode刷这么多题总结的一个经验是，大部分时候数组去实现都会将效率提升很多，后面在做递归的时候，用数组代替Set和map能显著提升效率。\n\n下面是我用数组实现的栈替代系统自带的栈，然后将执行时间成功有**43ms优化到了7ms**，一下击败了99%的人，可以看出差异真的很大。\n\n```java\n        int n = heights.length;\n        int max = 0;\n        int[] stack = new int[n + 1];\n        //记录栈顶元素的下标,因为系统的stack是封装好的，stack.pop()和stack.peek()会自动拿栈顶元素\n        //而我们自己实现的时候需要去用一个变量记录栈顶元素下标，初始值为-1，代表栈为null\n        int top = -1;\n        for (int i = 0; i <= n; ) {\n            int h = i == n ? 0 : heights[i];\n            if (top == -1 || h >= heights[stack[top]]) {\n                stack[++top] = i;\n                i++;\n            } else {\n                int high = heights[stack[top--]];\n                int right = i - 1;\n                int left = top == -1 ? 0 : stack[top] + 1;\n                int v = high * (right - left + 1);\n                max = max < v ? v : max;\n            }\n        }\n\n        return max;\n```\n\n这里入栈出栈没什么说的，都是指针的移动而已，唯一需要注意的是，因为我们初始化的是一个数组，且已经有初始空间了，我们不能用stack==null去判断数组是否为null，因此需要一个标志位去记录数组是否为空，我这里用的top这个int变量去表示的，这样一个好处是即可以判断是否为空，还可以用top记录指针当前位置。\n\n#### 写在最后\n\n维护单调栈这种写法其实是很巧妙的，但是在求面积的题里面其实经常用到，除了这个题还有字节面试的那道接雨水也是。后面碰到面积相关的可以往栈这边想一下。\n\n","source":"_posts/LeetCode刷题日记-柱状图中的最大面积.md","raw":"---\ntitle: LeetCode刷题日记-柱状图中的最大面积\ndate: 2021-04-23 00:02:34\ntags: ['LeetCode','日记','栈']\ncagetories: '栈'\n\n---\n\nLeetCode第84题，运用单调递增栈求柱状图的最大面积，这个思想还是很巧妙的，记录下解题思路。\n\n首先，膜拜下能想出用栈解这道题的人，真的对栈这种数据结构理解太深了。我不看别人题解我是基本想不出来这玩意还能用栈来解的。\n\n但是当你看懂其实思路还是很简单的。\n\n请跟着我的思路一起看下这个结果是怎么出来的，要求柱状图面积，那一定需要知道左右边界和高度，我们先手动维护一个单调递增的栈。这个栈能有什么用呢？\n\n<!-- more -->\n\n它会有一个特性，当第一个小于栈顶元素出现时，我们能算出栈里所有比当前元素大的以栈顶元素为右边界的这个柱子的最大面积，左边界怎么算呢，就是第二个栈顶元素+1，高度就是左右边界的最小高度。值为什么能这么算呢，因为栈是递增的，如果有比第二个栈顶元素小的元素时，它一定是被弹出去了。（这个可能有点不那么好思考，建议多写几遍或者debug一下）\n\n接下来看下代码：\n\n```java\n        int len = heights.length;\n        int maxArea = 0;\n        Stack<Integer> stack = new Stack<>();\n        //这里能等于n的原因是当i=n-1的时候栈里还会有最后一个元素，因此需要构造一个最小的n把栈里剩余其他元素拿出来\n        for (int i = 0; i <= len;) {\n            //等于n需要特殊处理\n            int h = (i == len ? 0 : heights[i]);\n            //维护一个单调递增栈，如果压栈元素比栈顶元素大，直接压入栈中，否则依次将比它大的元素取出\n            if (stack.isEmpty() || h >= heights[stack.peek()]) {\n                stack.push(i);\n                i++;\n            }else {\n                int curHeight = heights[stack.pop()];\n                int rightBoundary = i - 1;\n                int leftBoundary = stack.isEmpty() ? 0 : stack.peek() + 1;\n                int width = rightBoundary - leftBoundary + 1;\n                maxArea = Math.max(maxArea, (curHeight * width));\n            }\n        }\n        return maxArea;\n```\n\n解释下这块代码，我们一开始初始化了一个栈，和一个最大值，然后开始遍历柱子。\n\n**注意这里的 `for (int i = 0; i <= len;)` 是没有i++,i--这种迭代条件的**，为啥呢，因为这里只有在压栈的时候需要下标前移，如果出栈的话下标是不会动的。当然你也可以写成`for (int i = 0; i <= len;i++)`，那里面的`else`部分代码就需要写成while循环，以保证出栈计算面积的时候指针不会移动，看自己代码喜好吧，我看这种if,else感觉更清晰点。\n\n而且这里的i是能到n的，这样相当于循环了n+1次，这样是为了将最后的栈里元素出栈做的特殊操作。\n\n当i==n的时候，h就是0，代表一个最小值，然后把栈里面的元素全部压出来，否则就是正常的height[i]值。\n\n入栈的条件是栈为空或者栈顶元素小于等于height[i]，压栈之后指针要后移。\n\n当栈顶元素比height[i]大的时候，就可以计算柱状图的面积了，高度就是height[stack.pop()]，右边界i-1，左边界根据栈是否为空，空就是0，否则就是下一个栈顶元素+1,注意这时候第一个栈顶元素已经弹出来了，\n\n注意面积是right-left+1，这个你看柱状图就能看出来，比如6-5=1,其实是5,6两根柱子，所以要+1。\n\n然后面积就是height[stack.pop()]*(right-left+1),在用max每次拿到最大值即可。\n\n其实你写多了感觉这个实现不是很难，**难的是能把这个方法想出来的人**。\n\n上面是使用的系统自带的双端队列作为栈，但是由于做了一定的封装，其实效率并不高，因此在LeetCode提交时能打败的人其实不多，只有25%好像。\n\n那我们来优化一下，25确实太低了。\n\n优化的点是什么呢？你需要先记住一个结论，我LeetCode刷这么多题总结的一个经验是，大部分时候数组去实现都会将效率提升很多，后面在做递归的时候，用数组代替Set和map能显著提升效率。\n\n下面是我用数组实现的栈替代系统自带的栈，然后将执行时间成功有**43ms优化到了7ms**，一下击败了99%的人，可以看出差异真的很大。\n\n```java\n        int n = heights.length;\n        int max = 0;\n        int[] stack = new int[n + 1];\n        //记录栈顶元素的下标,因为系统的stack是封装好的，stack.pop()和stack.peek()会自动拿栈顶元素\n        //而我们自己实现的时候需要去用一个变量记录栈顶元素下标，初始值为-1，代表栈为null\n        int top = -1;\n        for (int i = 0; i <= n; ) {\n            int h = i == n ? 0 : heights[i];\n            if (top == -1 || h >= heights[stack[top]]) {\n                stack[++top] = i;\n                i++;\n            } else {\n                int high = heights[stack[top--]];\n                int right = i - 1;\n                int left = top == -1 ? 0 : stack[top] + 1;\n                int v = high * (right - left + 1);\n                max = max < v ? v : max;\n            }\n        }\n\n        return max;\n```\n\n这里入栈出栈没什么说的，都是指针的移动而已，唯一需要注意的是，因为我们初始化的是一个数组，且已经有初始空间了，我们不能用stack==null去判断数组是否为null，因此需要一个标志位去记录数组是否为空，我这里用的top这个int变量去表示的，这样一个好处是即可以判断是否为空，还可以用top记录指针当前位置。\n\n#### 写在最后\n\n维护单调栈这种写法其实是很巧妙的，但是在求面积的题里面其实经常用到，除了这个题还有字节面试的那道接雨水也是。后面碰到面积相关的可以往栈这边想一下。\n\n","slug":"LeetCode刷题日记-柱状图中的最大面积","published":1,"updated":"2021-04-22T17:04:50.821Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckod3078k0007nwtb6ce9c266","content":"<p>LeetCode第84题，运用单调递增栈求柱状图的最大面积，这个思想还是很巧妙的，记录下解题思路。</p>\n<p>首先，膜拜下能想出用栈解这道题的人，真的对栈这种数据结构理解太深了。我不看别人题解我是基本想不出来这玩意还能用栈来解的。</p>\n<p>但是当你看懂其实思路还是很简单的。</p>\n<p>请跟着我的思路一起看下这个结果是怎么出来的，要求柱状图面积，那一定需要知道左右边界和高度，我们先手动维护一个单调递增的栈。这个栈能有什么用呢？</p>\n<span id=\"more\"></span>\n\n<p>它会有一个特性，当第一个小于栈顶元素出现时，我们能算出栈里所有比当前元素大的以栈顶元素为右边界的这个柱子的最大面积，左边界怎么算呢，就是第二个栈顶元素+1，高度就是左右边界的最小高度。值为什么能这么算呢，因为栈是递增的，如果有比第二个栈顶元素小的元素时，它一定是被弹出去了。（这个可能有点不那么好思考，建议多写几遍或者debug一下）</p>\n<p>接下来看下代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> len = heights.length;</span><br><span class=\"line\"><span class=\"keyword\">int</span> maxArea = <span class=\"number\">0</span>;</span><br><span class=\"line\">Stack&lt;Integer&gt; stack = <span class=\"keyword\">new</span> Stack&lt;&gt;();</span><br><span class=\"line\"><span class=\"comment\">//这里能等于n的原因是当i=n-1的时候栈里还会有最后一个元素，因此需要构造一个最小的n把栈里剩余其他元素拿出来</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= len;) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//等于n需要特殊处理</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> h = (i == len ? <span class=\"number\">0</span> : heights[i]);</span><br><span class=\"line\">    <span class=\"comment\">//维护一个单调递增栈，如果压栈元素比栈顶元素大，直接压入栈中，否则依次将比它大的元素取出</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (stack.isEmpty() || h &gt;= heights[stack.peek()]) &#123;</span><br><span class=\"line\">        stack.push(i);</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> curHeight = heights[stack.pop()];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> rightBoundary = i - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> leftBoundary = stack.isEmpty() ? <span class=\"number\">0</span> : stack.peek() + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> width = rightBoundary - leftBoundary + <span class=\"number\">1</span>;</span><br><span class=\"line\">        maxArea = Math.max(maxArea, (curHeight * width));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> maxArea;</span><br></pre></td></tr></table></figure>\n\n<p>解释下这块代码，我们一开始初始化了一个栈，和一个最大值，然后开始遍历柱子。</p>\n<p><strong>注意这里的 <code>for (int i = 0; i &lt;= len;)</code> 是没有i++,i–这种迭代条件的</strong>，为啥呢，因为这里只有在压栈的时候需要下标前移，如果出栈的话下标是不会动的。当然你也可以写成<code>for (int i = 0; i &lt;= len;i++)</code>，那里面的<code>else</code>部分代码就需要写成while循环，以保证出栈计算面积的时候指针不会移动，看自己代码喜好吧，我看这种if,else感觉更清晰点。</p>\n<p>而且这里的i是能到n的，这样相当于循环了n+1次，这样是为了将最后的栈里元素出栈做的特殊操作。</p>\n<p>当i==n的时候，h就是0，代表一个最小值，然后把栈里面的元素全部压出来，否则就是正常的height[i]值。</p>\n<p>入栈的条件是栈为空或者栈顶元素小于等于height[i]，压栈之后指针要后移。</p>\n<p>当栈顶元素比height[i]大的时候，就可以计算柱状图的面积了，高度就是height[stack.pop()]，右边界i-1，左边界根据栈是否为空，空就是0，否则就是下一个栈顶元素+1,注意这时候第一个栈顶元素已经弹出来了，</p>\n<p>注意面积是right-left+1，这个你看柱状图就能看出来，比如6-5=1,其实是5,6两根柱子，所以要+1。</p>\n<p>然后面积就是height[stack.pop()]*(right-left+1),在用max每次拿到最大值即可。</p>\n<p>其实你写多了感觉这个实现不是很难，<strong>难的是能把这个方法想出来的人</strong>。</p>\n<p>上面是使用的系统自带的双端队列作为栈，但是由于做了一定的封装，其实效率并不高，因此在LeetCode提交时能打败的人其实不多，只有25%好像。</p>\n<p>那我们来优化一下，25确实太低了。</p>\n<p>优化的点是什么呢？你需要先记住一个结论，我LeetCode刷这么多题总结的一个经验是，大部分时候数组去实现都会将效率提升很多，后面在做递归的时候，用数组代替Set和map能显著提升效率。</p>\n<p>下面是我用数组实现的栈替代系统自带的栈，然后将执行时间成功有<strong>43ms优化到了7ms</strong>，一下击败了99%的人，可以看出差异真的很大。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> n = heights.length;</span><br><span class=\"line\"><span class=\"keyword\">int</span> max = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span>[] stack = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n + <span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"comment\">//记录栈顶元素的下标,因为系统的stack是封装好的，stack.pop()和stack.peek()会自动拿栈顶元素</span></span><br><span class=\"line\"><span class=\"comment\">//而我们自己实现的时候需要去用一个变量记录栈顶元素下标，初始值为-1，代表栈为null</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> top = -<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= n; ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> h = i == n ? <span class=\"number\">0</span> : heights[i];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (top == -<span class=\"number\">1</span> || h &gt;= heights[stack[top]]) &#123;</span><br><span class=\"line\">        stack[++top] = i;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> high = heights[stack[top--]];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> right = i - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> left = top == -<span class=\"number\">1</span> ? <span class=\"number\">0</span> : stack[top] + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v = high * (right - left + <span class=\"number\">1</span>);</span><br><span class=\"line\">        max = max &lt; v ? v : max;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> max;</span><br></pre></td></tr></table></figure>\n\n<p>这里入栈出栈没什么说的，都是指针的移动而已，唯一需要注意的是，因为我们初始化的是一个数组，且已经有初始空间了，我们不能用stack==null去判断数组是否为null，因此需要一个标志位去记录数组是否为空，我这里用的top这个int变量去表示的，这样一个好处是即可以判断是否为空，还可以用top记录指针当前位置。</p>\n<h4 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h4><p>维护单调栈这种写法其实是很巧妙的，但是在求面积的题里面其实经常用到，除了这个题还有字节面试的那道接雨水也是。后面碰到面积相关的可以往栈这边想一下。</p>\n","site":{"data":{}},"excerpt":"<p>LeetCode第84题，运用单调递增栈求柱状图的最大面积，这个思想还是很巧妙的，记录下解题思路。</p>\n<p>首先，膜拜下能想出用栈解这道题的人，真的对栈这种数据结构理解太深了。我不看别人题解我是基本想不出来这玩意还能用栈来解的。</p>\n<p>但是当你看懂其实思路还是很简单的。</p>\n<p>请跟着我的思路一起看下这个结果是怎么出来的，要求柱状图面积，那一定需要知道左右边界和高度，我们先手动维护一个单调递增的栈。这个栈能有什么用呢？</p>","more":"<p>它会有一个特性，当第一个小于栈顶元素出现时，我们能算出栈里所有比当前元素大的以栈顶元素为右边界的这个柱子的最大面积，左边界怎么算呢，就是第二个栈顶元素+1，高度就是左右边界的最小高度。值为什么能这么算呢，因为栈是递增的，如果有比第二个栈顶元素小的元素时，它一定是被弹出去了。（这个可能有点不那么好思考，建议多写几遍或者debug一下）</p>\n<p>接下来看下代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> len = heights.length;</span><br><span class=\"line\"><span class=\"keyword\">int</span> maxArea = <span class=\"number\">0</span>;</span><br><span class=\"line\">Stack&lt;Integer&gt; stack = <span class=\"keyword\">new</span> Stack&lt;&gt;();</span><br><span class=\"line\"><span class=\"comment\">//这里能等于n的原因是当i=n-1的时候栈里还会有最后一个元素，因此需要构造一个最小的n把栈里剩余其他元素拿出来</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= len;) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//等于n需要特殊处理</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> h = (i == len ? <span class=\"number\">0</span> : heights[i]);</span><br><span class=\"line\">    <span class=\"comment\">//维护一个单调递增栈，如果压栈元素比栈顶元素大，直接压入栈中，否则依次将比它大的元素取出</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (stack.isEmpty() || h &gt;= heights[stack.peek()]) &#123;</span><br><span class=\"line\">        stack.push(i);</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> curHeight = heights[stack.pop()];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> rightBoundary = i - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> leftBoundary = stack.isEmpty() ? <span class=\"number\">0</span> : stack.peek() + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> width = rightBoundary - leftBoundary + <span class=\"number\">1</span>;</span><br><span class=\"line\">        maxArea = Math.max(maxArea, (curHeight * width));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> maxArea;</span><br></pre></td></tr></table></figure>\n\n<p>解释下这块代码，我们一开始初始化了一个栈，和一个最大值，然后开始遍历柱子。</p>\n<p><strong>注意这里的 <code>for (int i = 0; i &lt;= len;)</code> 是没有i++,i–这种迭代条件的</strong>，为啥呢，因为这里只有在压栈的时候需要下标前移，如果出栈的话下标是不会动的。当然你也可以写成<code>for (int i = 0; i &lt;= len;i++)</code>，那里面的<code>else</code>部分代码就需要写成while循环，以保证出栈计算面积的时候指针不会移动，看自己代码喜好吧，我看这种if,else感觉更清晰点。</p>\n<p>而且这里的i是能到n的，这样相当于循环了n+1次，这样是为了将最后的栈里元素出栈做的特殊操作。</p>\n<p>当i==n的时候，h就是0，代表一个最小值，然后把栈里面的元素全部压出来，否则就是正常的height[i]值。</p>\n<p>入栈的条件是栈为空或者栈顶元素小于等于height[i]，压栈之后指针要后移。</p>\n<p>当栈顶元素比height[i]大的时候，就可以计算柱状图的面积了，高度就是height[stack.pop()]，右边界i-1，左边界根据栈是否为空，空就是0，否则就是下一个栈顶元素+1,注意这时候第一个栈顶元素已经弹出来了，</p>\n<p>注意面积是right-left+1，这个你看柱状图就能看出来，比如6-5=1,其实是5,6两根柱子，所以要+1。</p>\n<p>然后面积就是height[stack.pop()]*(right-left+1),在用max每次拿到最大值即可。</p>\n<p>其实你写多了感觉这个实现不是很难，<strong>难的是能把这个方法想出来的人</strong>。</p>\n<p>上面是使用的系统自带的双端队列作为栈，但是由于做了一定的封装，其实效率并不高，因此在LeetCode提交时能打败的人其实不多，只有25%好像。</p>\n<p>那我们来优化一下，25确实太低了。</p>\n<p>优化的点是什么呢？你需要先记住一个结论，我LeetCode刷这么多题总结的一个经验是，大部分时候数组去实现都会将效率提升很多，后面在做递归的时候，用数组代替Set和map能显著提升效率。</p>\n<p>下面是我用数组实现的栈替代系统自带的栈，然后将执行时间成功有<strong>43ms优化到了7ms</strong>，一下击败了99%的人，可以看出差异真的很大。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> n = heights.length;</span><br><span class=\"line\"><span class=\"keyword\">int</span> max = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span>[] stack = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n + <span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"comment\">//记录栈顶元素的下标,因为系统的stack是封装好的，stack.pop()和stack.peek()会自动拿栈顶元素</span></span><br><span class=\"line\"><span class=\"comment\">//而我们自己实现的时候需要去用一个变量记录栈顶元素下标，初始值为-1，代表栈为null</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> top = -<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= n; ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> h = i == n ? <span class=\"number\">0</span> : heights[i];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (top == -<span class=\"number\">1</span> || h &gt;= heights[stack[top]]) &#123;</span><br><span class=\"line\">        stack[++top] = i;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> high = heights[stack[top--]];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> right = i - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> left = top == -<span class=\"number\">1</span> ? <span class=\"number\">0</span> : stack[top] + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v = high * (right - left + <span class=\"number\">1</span>);</span><br><span class=\"line\">        max = max &lt; v ? v : max;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> max;</span><br></pre></td></tr></table></figure>\n\n<p>这里入栈出栈没什么说的，都是指针的移动而已，唯一需要注意的是，因为我们初始化的是一个数组，且已经有初始空间了，我们不能用stack==null去判断数组是否为null，因此需要一个标志位去记录数组是否为空，我这里用的top这个int变量去表示的，这样一个好处是即可以判断是否为空，还可以用top记录指针当前位置。</p>\n<h4 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h4><p>维护单调栈这种写法其实是很巧妙的，但是在求面积的题里面其实经常用到，除了这个题还有字节面试的那道接雨水也是。后面碰到面积相关的可以往栈这边想一下。</p>"},{"title":"LeetCode刷题日记-滑动窗口最大值","date":"2021-04-26T15:56:00.000Z","_content":"\n今天来看下LeetCode第239题-滑动窗口最大值。\n\n首先看下题：\n\n给你一个整数数组 nums，有一个大小为 k 的滑动窗口从数组的最左侧移动到数组的最右侧。你只可以看到在滑动窗口内的 k 个数字。滑动窗口每次只向右移动一位。\n\n返回滑动窗口中的最大值。\n\n<!-- more -->\n\n示例：\n\n```java\n输入：nums = [1,3,-1,-3,5,3,6,7], k = 3\n输出：[3,3,5,5,6,7]\n解释：\n滑动窗口的位置                最大值\n---------------               -----\n[1  3  -1] -3  5  3  6  7       3\n 1 [3  -1  -3] 5  3  6  7       3\n 1  3 [-1  -3  5] 3  6  7       5\n 1  3  -1 [-3  5  3] 6  7       5\n 1  3  -1  -3 [5  3  6] 7       6\n 1  3  -1  -3  5 [3  6  7]      7\n\n```\n\n就是给出一个数组和一个k值，在数组里会有一个从0开始遍历到n-k+1位置的窗口，要给出每个窗口的最大值。\n\n这题的解法有很多，我们先来大概理下思路：\n\n1、暴力 O(n*k)\n\n2、堆 O(n*logk)\n\n3、双端队列 O(n)\n\n4、双数组（那个方法看着像这个，具体也不好形容） O(n)\n\n都说`Talk is cheap,show me the code.`，所以直接上代码。\n\n**暴力法**代码还是比较简单的，但是有个致命的弱点是复杂度较高，直接会超时。\n\n```java\n        int[] res = new int[nums.length - k + 1];\n        int index = 0;\n        for (int i = 0; i < nums.length - k + 1; i++) {\n            int max = Integer.MIN_VALUE;\n            for (int j = i; j < i + k; j++) {\n                max = Math.max(max, nums[j]);\n            }\n            res[index++] = max;\n        }\n\n        return res;\n```\n\n **堆**实现在各大语言里都有现成的封装类，java里面是PriorityQueue.思路就是维护一个k大小的大顶堆，然后堆里存的是下标而不是nums[i]，因为你可以用下标快速找到nums[i]，但是nums[i]找下标会很麻烦，然后利用index<=i-k这个条件，将超过窗口的元素拿出去,最后一次拿堆顶元素就是窗口最大值了。\n\n这里实现有两种，一个是先初始化第一个窗口堆，然后循环后面，另一个是直接循环所有的，第一个适合新手，熟了之后推荐第二种，优雅点：\n\n```java\n        /**\n         * 法一\n         */\n        int n = nums.length;\n        PriorityQueue<Integer> pq = new PriorityQueue<>((o1, o2) -> (nums[o2] - nums[o1]));\n        for (int i = 0; i < k; ++i) {\n            pq.offer(i);\n        }\n        int[] ans = new int[n - k + 1];\n        ans[0] = nums[pq.peek()];\n        for (int i = k; i < n; ++i) {\n            pq.offer(i);\n            while (pq.peek() <= i - k) {\n                pq.poll();\n            }\n            ans[i - k + 1] = nums[pq.peek()];\n        }\n        return ans;\n```\n\n```java\n        /**\n         * 法二\n         */\n        if (nums.length == 0 || k == 0) {\n            return new int[]{};\n        }\n\n        PriorityQueue<Integer> pq = new PriorityQueue<>((o1, o2) -> (nums[o2] - nums[o1]));\n        int[] ans = new int[nums.length - k + 1];\n        for (int i = 0; i < nums.length; ++i) {\n            while (!pq.isEmpty() && pq.peek() <= i - k) {\n                pq.poll();\n            }\n            pq.offer(i);\n            if (i - k + 1 >= 0) {\n                ans[i - k + 1] = nums[pq.peek()];\n            }\n        }\n        return ans;\n```\n\n**双端队列**实现是利用deque可以双向出入的特性，保证deque里面左边元素始终最大的，这样最大元素只要每次拿deque.peekFirst()即可。利用deque.peekFirst() == i - k这个调教保证超出窗口的元素出去。每次入队的时候验证nums[i]和队尾元素大小，如果比队尾元素大，则将队尾元素取出。然后将i加入队列中。\n\n```java\n        /**\n         * 双端队列\n         * 时间复杂度O(n+k)，空间复杂度O(n)\n         * 始终保持双端队列头一个元素为最大值\n         */\n        if (nums == null || nums.length == 0) {\n            return nums;\n        }\n        int[] res = new int[nums.length - k + 1];\n        Deque<Integer> deque = new LinkedList<>();\n        for (int i = 0; i < nums.length; i++) {\n            //窗口已经占满了\n            if (!deque.isEmpty() && deque.peekFirst() == i - k) {\n//            if (!deque.isEmpty() && deque.peekFirst() < i - k + 1) {\n                deque.pollFirst();\n            }\n            //始终保持队列按从大到小排列,且会一直移除新加元素小的元素，如果\n            //nums[i]大于队列所有值，会移除队列所有值\n            while (!deque.isEmpty() && nums[deque.peekLast()] < nums[i]) {\n                deque.pollLast();\n            }\n            deque.offerLast(i);\n            //当窗口满了k个元素，将其一个个放入res[]数组中\n            if (i >= k - 1) {\n                //第一个元素始终是最大的元素\n                res[i + 1 - k] = nums[deque.peekFirst()];\n            }\n        }\n        return res;\n```\n\n**双端队列**的代码其实还可以优化，上面的代码是用的系统自带的Deque，我前面日记里面说过系统库函数一般会考虑很多实际工业上情况和很多边界条件，因此性能不会很好，所以我们可以进一步自己实现一个双端队列，从而提高运行时间。\n\n给个参考数据，**我用系统自带的Deque，也就是上面代码，运行时间是39ms,击败50.38%的java用户；而我用自己实现的Deque，也就是下面的代码，运行时间是29ms,击败了96.29%的java用户。**\n\n```java\n        /**\n         * 数组实现双端队列\n         *\n         */\n        if (nums.length == 0 || k == 0) {\n            return new int[]{};\n        }\n        int count = k + 1;\n        int[] deque = new int[count];\n        int head = 0;\n        int tail = 0;\n        int[] res = new int[nums.length - k + 1];\n        for (int i = 0; i < nums.length; i++) {\n            if (tail != head && deque[head%count] == i - k) {\n                head = (head + 1) % count;\n            }\n            while (tail != head && nums[deque[(tail - 1 + count) % count]] < nums[i]) {\n                tail = (tail - 1 + count) % count;\n            }\n            deque[tail] = i;\n            tail = (tail + 1) % count;\n            if (i - k + 1 >= 0) {\n                res[i - k + 1] = nums[deque[head % count]];\n            }\n        }\n        return res;\n```\n\n这个数组实现的Deque代码其实就是前面日记的循环双端队列拿过来稍微改了下，我就不做过多解释了，不太清楚的可以去看看前面的设计循环双端对列的文章。\n\n#### **双数组方法**是所有方法里面最高效的，运行时间是13ms，比数组的双端队列少了一半多的时间。\n\n但是怎么说这个方法不具普遍性，感觉有点取巧，正统方法还是双端队列优雅点。\n\n思路是： 将数组按k个一组分成多段，最后一段可能不足k个，\n1、分别从左边开始找到最大值和右边开始找到最大值。\n2、比较左右最大值，大的那个就是该位置滑动窗口的最大值。\n\n```java\n        final int[] max_left = new int[nums.length];\n        final int[] max_right = new int[nums.length];\n\n        max_left[0] = nums[0];\n        max_right[nums.length - 1] = nums[nums.length - 1];\n\n        for (int i = 1; i < nums.length; i++) {\n            max_left[i] = (i % k == 0) ? nums[i] : Math.max(max_left[i - 1], nums[i]);\n\n            final int j = nums.length - i - 1;\n            max_right[j] = (j % k == 0) ? nums[j] : Math.max(max_right[j + 1], nums[j]);\n        }\n\n        final int[] sliding_max = new int[nums.length - k + 1];\n        for (int i = 0, j = 0; i + k <= nums.length; i++) {\n            sliding_max[j++] = Math.max(max_right[i], max_left[i + k - 1]);\n        }\n\n        return sliding_max;\n```\n\n#### 写在最后\n\n这些方法里面效率最高的是最后这种双数组的方法，但是实际场景感觉不太好用，这个题的考察点还是堆和双端队列。队列这种数据结构在实际开发场景中运用还是很多的。所以还是要多熟悉下。","source":"_posts/LeetCode刷题日记-滑动窗口最大值.md","raw":"---\ntitle: LeetCode刷题日记-滑动窗口最大值\ndate: 2021-04-26 23:56:00\ntags: ['堆','队列','双端队列','日记','LeetCode','数组']\ncategories: '队列'\n---\n\n今天来看下LeetCode第239题-滑动窗口最大值。\n\n首先看下题：\n\n给你一个整数数组 nums，有一个大小为 k 的滑动窗口从数组的最左侧移动到数组的最右侧。你只可以看到在滑动窗口内的 k 个数字。滑动窗口每次只向右移动一位。\n\n返回滑动窗口中的最大值。\n\n<!-- more -->\n\n示例：\n\n```java\n输入：nums = [1,3,-1,-3,5,3,6,7], k = 3\n输出：[3,3,5,5,6,7]\n解释：\n滑动窗口的位置                最大值\n---------------               -----\n[1  3  -1] -3  5  3  6  7       3\n 1 [3  -1  -3] 5  3  6  7       3\n 1  3 [-1  -3  5] 3  6  7       5\n 1  3  -1 [-3  5  3] 6  7       5\n 1  3  -1  -3 [5  3  6] 7       6\n 1  3  -1  -3  5 [3  6  7]      7\n\n```\n\n就是给出一个数组和一个k值，在数组里会有一个从0开始遍历到n-k+1位置的窗口，要给出每个窗口的最大值。\n\n这题的解法有很多，我们先来大概理下思路：\n\n1、暴力 O(n*k)\n\n2、堆 O(n*logk)\n\n3、双端队列 O(n)\n\n4、双数组（那个方法看着像这个，具体也不好形容） O(n)\n\n都说`Talk is cheap,show me the code.`，所以直接上代码。\n\n**暴力法**代码还是比较简单的，但是有个致命的弱点是复杂度较高，直接会超时。\n\n```java\n        int[] res = new int[nums.length - k + 1];\n        int index = 0;\n        for (int i = 0; i < nums.length - k + 1; i++) {\n            int max = Integer.MIN_VALUE;\n            for (int j = i; j < i + k; j++) {\n                max = Math.max(max, nums[j]);\n            }\n            res[index++] = max;\n        }\n\n        return res;\n```\n\n **堆**实现在各大语言里都有现成的封装类，java里面是PriorityQueue.思路就是维护一个k大小的大顶堆，然后堆里存的是下标而不是nums[i]，因为你可以用下标快速找到nums[i]，但是nums[i]找下标会很麻烦，然后利用index<=i-k这个条件，将超过窗口的元素拿出去,最后一次拿堆顶元素就是窗口最大值了。\n\n这里实现有两种，一个是先初始化第一个窗口堆，然后循环后面，另一个是直接循环所有的，第一个适合新手，熟了之后推荐第二种，优雅点：\n\n```java\n        /**\n         * 法一\n         */\n        int n = nums.length;\n        PriorityQueue<Integer> pq = new PriorityQueue<>((o1, o2) -> (nums[o2] - nums[o1]));\n        for (int i = 0; i < k; ++i) {\n            pq.offer(i);\n        }\n        int[] ans = new int[n - k + 1];\n        ans[0] = nums[pq.peek()];\n        for (int i = k; i < n; ++i) {\n            pq.offer(i);\n            while (pq.peek() <= i - k) {\n                pq.poll();\n            }\n            ans[i - k + 1] = nums[pq.peek()];\n        }\n        return ans;\n```\n\n```java\n        /**\n         * 法二\n         */\n        if (nums.length == 0 || k == 0) {\n            return new int[]{};\n        }\n\n        PriorityQueue<Integer> pq = new PriorityQueue<>((o1, o2) -> (nums[o2] - nums[o1]));\n        int[] ans = new int[nums.length - k + 1];\n        for (int i = 0; i < nums.length; ++i) {\n            while (!pq.isEmpty() && pq.peek() <= i - k) {\n                pq.poll();\n            }\n            pq.offer(i);\n            if (i - k + 1 >= 0) {\n                ans[i - k + 1] = nums[pq.peek()];\n            }\n        }\n        return ans;\n```\n\n**双端队列**实现是利用deque可以双向出入的特性，保证deque里面左边元素始终最大的，这样最大元素只要每次拿deque.peekFirst()即可。利用deque.peekFirst() == i - k这个调教保证超出窗口的元素出去。每次入队的时候验证nums[i]和队尾元素大小，如果比队尾元素大，则将队尾元素取出。然后将i加入队列中。\n\n```java\n        /**\n         * 双端队列\n         * 时间复杂度O(n+k)，空间复杂度O(n)\n         * 始终保持双端队列头一个元素为最大值\n         */\n        if (nums == null || nums.length == 0) {\n            return nums;\n        }\n        int[] res = new int[nums.length - k + 1];\n        Deque<Integer> deque = new LinkedList<>();\n        for (int i = 0; i < nums.length; i++) {\n            //窗口已经占满了\n            if (!deque.isEmpty() && deque.peekFirst() == i - k) {\n//            if (!deque.isEmpty() && deque.peekFirst() < i - k + 1) {\n                deque.pollFirst();\n            }\n            //始终保持队列按从大到小排列,且会一直移除新加元素小的元素，如果\n            //nums[i]大于队列所有值，会移除队列所有值\n            while (!deque.isEmpty() && nums[deque.peekLast()] < nums[i]) {\n                deque.pollLast();\n            }\n            deque.offerLast(i);\n            //当窗口满了k个元素，将其一个个放入res[]数组中\n            if (i >= k - 1) {\n                //第一个元素始终是最大的元素\n                res[i + 1 - k] = nums[deque.peekFirst()];\n            }\n        }\n        return res;\n```\n\n**双端队列**的代码其实还可以优化，上面的代码是用的系统自带的Deque，我前面日记里面说过系统库函数一般会考虑很多实际工业上情况和很多边界条件，因此性能不会很好，所以我们可以进一步自己实现一个双端队列，从而提高运行时间。\n\n给个参考数据，**我用系统自带的Deque，也就是上面代码，运行时间是39ms,击败50.38%的java用户；而我用自己实现的Deque，也就是下面的代码，运行时间是29ms,击败了96.29%的java用户。**\n\n```java\n        /**\n         * 数组实现双端队列\n         *\n         */\n        if (nums.length == 0 || k == 0) {\n            return new int[]{};\n        }\n        int count = k + 1;\n        int[] deque = new int[count];\n        int head = 0;\n        int tail = 0;\n        int[] res = new int[nums.length - k + 1];\n        for (int i = 0; i < nums.length; i++) {\n            if (tail != head && deque[head%count] == i - k) {\n                head = (head + 1) % count;\n            }\n            while (tail != head && nums[deque[(tail - 1 + count) % count]] < nums[i]) {\n                tail = (tail - 1 + count) % count;\n            }\n            deque[tail] = i;\n            tail = (tail + 1) % count;\n            if (i - k + 1 >= 0) {\n                res[i - k + 1] = nums[deque[head % count]];\n            }\n        }\n        return res;\n```\n\n这个数组实现的Deque代码其实就是前面日记的循环双端队列拿过来稍微改了下，我就不做过多解释了，不太清楚的可以去看看前面的设计循环双端对列的文章。\n\n#### **双数组方法**是所有方法里面最高效的，运行时间是13ms，比数组的双端队列少了一半多的时间。\n\n但是怎么说这个方法不具普遍性，感觉有点取巧，正统方法还是双端队列优雅点。\n\n思路是： 将数组按k个一组分成多段，最后一段可能不足k个，\n1、分别从左边开始找到最大值和右边开始找到最大值。\n2、比较左右最大值，大的那个就是该位置滑动窗口的最大值。\n\n```java\n        final int[] max_left = new int[nums.length];\n        final int[] max_right = new int[nums.length];\n\n        max_left[0] = nums[0];\n        max_right[nums.length - 1] = nums[nums.length - 1];\n\n        for (int i = 1; i < nums.length; i++) {\n            max_left[i] = (i % k == 0) ? nums[i] : Math.max(max_left[i - 1], nums[i]);\n\n            final int j = nums.length - i - 1;\n            max_right[j] = (j % k == 0) ? nums[j] : Math.max(max_right[j + 1], nums[j]);\n        }\n\n        final int[] sliding_max = new int[nums.length - k + 1];\n        for (int i = 0, j = 0; i + k <= nums.length; i++) {\n            sliding_max[j++] = Math.max(max_right[i], max_left[i + k - 1]);\n        }\n\n        return sliding_max;\n```\n\n#### 写在最后\n\n这些方法里面效率最高的是最后这种双数组的方法，但是实际场景感觉不太好用，这个题的考察点还是堆和双端队列。队列这种数据结构在实际开发场景中运用还是很多的。所以还是要多熟悉下。","slug":"LeetCode刷题日记-滑动窗口最大值","published":1,"updated":"2021-04-26T17:20:07.605Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckod3078q000wnwtb5f7tbjkj","content":"<p>今天来看下LeetCode第239题-滑动窗口最大值。</p>\n<p>首先看下题：</p>\n<p>给你一个整数数组 nums，有一个大小为 k 的滑动窗口从数组的最左侧移动到数组的最右侧。你只可以看到在滑动窗口内的 k 个数字。滑动窗口每次只向右移动一位。</p>\n<p>返回滑动窗口中的最大值。</p>\n<span id=\"more\"></span>\n\n<p>示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [<span class=\"number\">1</span>,<span class=\"number\">3</span>,-<span class=\"number\">1</span>,-<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">3</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>], k = <span class=\"number\">3</span></span><br><span class=\"line\">输出：[<span class=\"number\">3</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>]</span><br><span class=\"line\">解释：</span><br><span class=\"line\">滑动窗口的位置                最大值</span><br><span class=\"line\">---------------               -----</span><br><span class=\"line\">[<span class=\"number\">1</span>  <span class=\"number\">3</span>  -<span class=\"number\">1</span>] -<span class=\"number\">3</span>  <span class=\"number\">5</span>  <span class=\"number\">3</span>  <span class=\"number\">6</span>  <span class=\"number\">7</span>       <span class=\"number\">3</span></span><br><span class=\"line\"> <span class=\"number\">1</span> [<span class=\"number\">3</span>  -<span class=\"number\">1</span>  -<span class=\"number\">3</span>] <span class=\"number\">5</span>  <span class=\"number\">3</span>  <span class=\"number\">6</span>  <span class=\"number\">7</span>       <span class=\"number\">3</span></span><br><span class=\"line\"> <span class=\"number\">1</span>  <span class=\"number\">3</span> [-<span class=\"number\">1</span>  -<span class=\"number\">3</span>  <span class=\"number\">5</span>] <span class=\"number\">3</span>  <span class=\"number\">6</span>  <span class=\"number\">7</span>       <span class=\"number\">5</span></span><br><span class=\"line\"> <span class=\"number\">1</span>  <span class=\"number\">3</span>  -<span class=\"number\">1</span> [-<span class=\"number\">3</span>  <span class=\"number\">5</span>  <span class=\"number\">3</span>] <span class=\"number\">6</span>  <span class=\"number\">7</span>       <span class=\"number\">5</span></span><br><span class=\"line\"> <span class=\"number\">1</span>  <span class=\"number\">3</span>  -<span class=\"number\">1</span>  -<span class=\"number\">3</span> [<span class=\"number\">5</span>  <span class=\"number\">3</span>  <span class=\"number\">6</span>] <span class=\"number\">7</span>       <span class=\"number\">6</span></span><br><span class=\"line\"> <span class=\"number\">1</span>  <span class=\"number\">3</span>  -<span class=\"number\">1</span>  -<span class=\"number\">3</span>  <span class=\"number\">5</span> [<span class=\"number\">3</span>  <span class=\"number\">6</span>  <span class=\"number\">7</span>]      <span class=\"number\">7</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>就是给出一个数组和一个k值，在数组里会有一个从0开始遍历到n-k+1位置的窗口，要给出每个窗口的最大值。</p>\n<p>这题的解法有很多，我们先来大概理下思路：</p>\n<p>1、暴力 O(n*k)</p>\n<p>2、堆 O(n*logk)</p>\n<p>3、双端队列 O(n)</p>\n<p>4、双数组（那个方法看着像这个，具体也不好形容） O(n)</p>\n<p>都说<code>Talk is cheap,show me the code.</code>，所以直接上代码。</p>\n<p><strong>暴力法</strong>代码还是比较简单的，但是有个致命的弱点是复杂度较高，直接会超时。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span>[] res = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[nums.length - k + <span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length - k + <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> max = Integer.MIN_VALUE;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i; j &lt; i + k; j++) &#123;</span><br><span class=\"line\">        max = Math.max(max, nums[j]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    res[index++] = max;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> res;</span><br></pre></td></tr></table></figure>\n\n<p> <strong>堆</strong>实现在各大语言里都有现成的封装类，java里面是PriorityQueue.思路就是维护一个k大小的大顶堆，然后堆里存的是下标而不是nums[i]，因为你可以用下标快速找到nums[i]，但是nums[i]找下标会很麻烦，然后利用index&lt;=i-k这个条件，将超过窗口的元素拿出去,最后一次拿堆顶元素就是窗口最大值了。</p>\n<p>这里实现有两种，一个是先初始化第一个窗口堆，然后循环后面，另一个是直接循环所有的，第一个适合新手，熟了之后推荐第二种，优雅点：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 法一</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> n = nums.length;</span><br><span class=\"line\">PriorityQueue&lt;Integer&gt; pq = <span class=\"keyword\">new</span> PriorityQueue&lt;&gt;((o1, o2) -&gt; (nums[o2] - nums[o1]));</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; k; ++i) &#123;</span><br><span class=\"line\">    pq.offer(i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">int</span>[] ans = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n - k + <span class=\"number\">1</span>];</span><br><span class=\"line\">ans[<span class=\"number\">0</span>] = nums[pq.peek()];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = k; i &lt; n; ++i) &#123;</span><br><span class=\"line\">    pq.offer(i);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (pq.peek() &lt;= i - k) &#123;</span><br><span class=\"line\">        pq.poll();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ans[i - k + <span class=\"number\">1</span>] = nums[pq.peek()];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> ans;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 法二</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (nums.length == <span class=\"number\">0</span> || k == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">PriorityQueue&lt;Integer&gt; pq = <span class=\"keyword\">new</span> PriorityQueue&lt;&gt;((o1, o2) -&gt; (nums[o2] - nums[o1]));</span><br><span class=\"line\"><span class=\"keyword\">int</span>[] ans = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[nums.length - k + <span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; ++i) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!pq.isEmpty() &amp;&amp; pq.peek() &lt;= i - k) &#123;</span><br><span class=\"line\">        pq.poll();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    pq.offer(i);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i - k + <span class=\"number\">1</span> &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        ans[i - k + <span class=\"number\">1</span>] = nums[pq.peek()];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> ans;</span><br></pre></td></tr></table></figure>\n\n<p><strong>双端队列</strong>实现是利用deque可以双向出入的特性，保证deque里面左边元素始终最大的，这样最大元素只要每次拿deque.peekFirst()即可。利用deque.peekFirst() == i - k这个调教保证超出窗口的元素出去。每次入队的时候验证nums[i]和队尾元素大小，如果比队尾元素大，则将队尾元素取出。然后将i加入队列中。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 双端队列</span></span><br><span class=\"line\"><span class=\"comment\">         * 时间复杂度O(n+k)，空间复杂度O(n)</span></span><br><span class=\"line\"><span class=\"comment\">         * 始终保持双端队列头一个元素为最大值</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums == <span class=\"keyword\">null</span> || nums.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> nums;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] res = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[nums.length - k + <span class=\"number\">1</span>];</span><br><span class=\"line\">        Deque&lt;Integer&gt; deque = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//窗口已经占满了</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!deque.isEmpty() &amp;&amp; deque.peekFirst() == i - k) &#123;</span><br><span class=\"line\"><span class=\"comment\">//            if (!deque.isEmpty() &amp;&amp; deque.peekFirst() &lt; i - k + 1) &#123;</span></span><br><span class=\"line\">                deque.pollFirst();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//始终保持队列按从大到小排列,且会一直移除新加元素小的元素，如果</span></span><br><span class=\"line\">            <span class=\"comment\">//nums[i]大于队列所有值，会移除队列所有值</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (!deque.isEmpty() &amp;&amp; nums[deque.peekLast()] &lt; nums[i]) &#123;</span><br><span class=\"line\">                deque.pollLast();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            deque.offerLast(i);</span><br><span class=\"line\">            <span class=\"comment\">//当窗口满了k个元素，将其一个个放入res[]数组中</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i &gt;= k - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//第一个元素始终是最大的元素</span></span><br><span class=\"line\">                res[i + <span class=\"number\">1</span> - k] = nums[deque.peekFirst()];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br></pre></td></tr></table></figure>\n\n<p><strong>双端队列</strong>的代码其实还可以优化，上面的代码是用的系统自带的Deque，我前面日记里面说过系统库函数一般会考虑很多实际工业上情况和很多边界条件，因此性能不会很好，所以我们可以进一步自己实现一个双端队列，从而提高运行时间。</p>\n<p>给个参考数据，<strong>我用系统自带的Deque，也就是上面代码，运行时间是39ms,击败50.38%的java用户；而我用自己实现的Deque，也就是下面的代码，运行时间是29ms,击败了96.29%的java用户。</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 数组实现双端队列</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (nums.length == <span class=\"number\">0</span> || k == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">int</span> count = k + <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span>[] deque = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[count];</span><br><span class=\"line\"><span class=\"keyword\">int</span> head = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> tail = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span>[] res = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[nums.length - k + <span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tail != head &amp;&amp; deque[head%count] == i - k) &#123;</span><br><span class=\"line\">        head = (head + <span class=\"number\">1</span>) % count;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (tail != head &amp;&amp; nums[deque[(tail - <span class=\"number\">1</span> + count) % count]] &lt; nums[i]) &#123;</span><br><span class=\"line\">        tail = (tail - <span class=\"number\">1</span> + count) % count;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    deque[tail] = i;</span><br><span class=\"line\">    tail = (tail + <span class=\"number\">1</span>) % count;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i - k + <span class=\"number\">1</span> &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        res[i - k + <span class=\"number\">1</span>] = nums[deque[head % count]];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> res;</span><br></pre></td></tr></table></figure>\n\n<p>这个数组实现的Deque代码其实就是前面日记的循环双端队列拿过来稍微改了下，我就不做过多解释了，不太清楚的可以去看看前面的设计循环双端对列的文章。</p>\n<h4 id=\"双数组方法是所有方法里面最高效的，运行时间是13ms，比数组的双端队列少了一半多的时间。\"><a href=\"#双数组方法是所有方法里面最高效的，运行时间是13ms，比数组的双端队列少了一半多的时间。\" class=\"headerlink\" title=\"双数组方法是所有方法里面最高效的，运行时间是13ms，比数组的双端队列少了一半多的时间。\"></a><strong>双数组方法</strong>是所有方法里面最高效的，运行时间是13ms，比数组的双端队列少了一半多的时间。</h4><p>但是怎么说这个方法不具普遍性，感觉有点取巧，正统方法还是双端队列优雅点。</p>\n<p>思路是： 将数组按k个一组分成多段，最后一段可能不足k个，<br>1、分别从左边开始找到最大值和右边开始找到最大值。<br>2、比较左右最大值，大的那个就是该位置滑动窗口的最大值。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span>[] max_left = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[nums.length];</span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span>[] max_right = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[nums.length];</span><br><span class=\"line\"></span><br><span class=\"line\">max_left[<span class=\"number\">0</span>] = nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">max_right[nums.length - <span class=\"number\">1</span>] = nums[nums.length - <span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">    max_left[i] = (i % k == <span class=\"number\">0</span>) ? nums[i] : Math.max(max_left[i - <span class=\"number\">1</span>], nums[i]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> j = nums.length - i - <span class=\"number\">1</span>;</span><br><span class=\"line\">    max_right[j] = (j % k == <span class=\"number\">0</span>) ? nums[j] : Math.max(max_right[j + <span class=\"number\">1</span>], nums[j]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span>[] sliding_max = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[nums.length - k + <span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, j = <span class=\"number\">0</span>; i + k &lt;= nums.length; i++) &#123;</span><br><span class=\"line\">    sliding_max[j++] = Math.max(max_right[i], max_left[i + k - <span class=\"number\">1</span>]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> sliding_max;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h4><p>这些方法里面效率最高的是最后这种双数组的方法，但是实际场景感觉不太好用，这个题的考察点还是堆和双端队列。队列这种数据结构在实际开发场景中运用还是很多的。所以还是要多熟悉下。</p>\n","site":{"data":{}},"excerpt":"<p>今天来看下LeetCode第239题-滑动窗口最大值。</p>\n<p>首先看下题：</p>\n<p>给你一个整数数组 nums，有一个大小为 k 的滑动窗口从数组的最左侧移动到数组的最右侧。你只可以看到在滑动窗口内的 k 个数字。滑动窗口每次只向右移动一位。</p>\n<p>返回滑动窗口中的最大值。</p>","more":"<p>示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [<span class=\"number\">1</span>,<span class=\"number\">3</span>,-<span class=\"number\">1</span>,-<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">3</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>], k = <span class=\"number\">3</span></span><br><span class=\"line\">输出：[<span class=\"number\">3</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>]</span><br><span class=\"line\">解释：</span><br><span class=\"line\">滑动窗口的位置                最大值</span><br><span class=\"line\">---------------               -----</span><br><span class=\"line\">[<span class=\"number\">1</span>  <span class=\"number\">3</span>  -<span class=\"number\">1</span>] -<span class=\"number\">3</span>  <span class=\"number\">5</span>  <span class=\"number\">3</span>  <span class=\"number\">6</span>  <span class=\"number\">7</span>       <span class=\"number\">3</span></span><br><span class=\"line\"> <span class=\"number\">1</span> [<span class=\"number\">3</span>  -<span class=\"number\">1</span>  -<span class=\"number\">3</span>] <span class=\"number\">5</span>  <span class=\"number\">3</span>  <span class=\"number\">6</span>  <span class=\"number\">7</span>       <span class=\"number\">3</span></span><br><span class=\"line\"> <span class=\"number\">1</span>  <span class=\"number\">3</span> [-<span class=\"number\">1</span>  -<span class=\"number\">3</span>  <span class=\"number\">5</span>] <span class=\"number\">3</span>  <span class=\"number\">6</span>  <span class=\"number\">7</span>       <span class=\"number\">5</span></span><br><span class=\"line\"> <span class=\"number\">1</span>  <span class=\"number\">3</span>  -<span class=\"number\">1</span> [-<span class=\"number\">3</span>  <span class=\"number\">5</span>  <span class=\"number\">3</span>] <span class=\"number\">6</span>  <span class=\"number\">7</span>       <span class=\"number\">5</span></span><br><span class=\"line\"> <span class=\"number\">1</span>  <span class=\"number\">3</span>  -<span class=\"number\">1</span>  -<span class=\"number\">3</span> [<span class=\"number\">5</span>  <span class=\"number\">3</span>  <span class=\"number\">6</span>] <span class=\"number\">7</span>       <span class=\"number\">6</span></span><br><span class=\"line\"> <span class=\"number\">1</span>  <span class=\"number\">3</span>  -<span class=\"number\">1</span>  -<span class=\"number\">3</span>  <span class=\"number\">5</span> [<span class=\"number\">3</span>  <span class=\"number\">6</span>  <span class=\"number\">7</span>]      <span class=\"number\">7</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>就是给出一个数组和一个k值，在数组里会有一个从0开始遍历到n-k+1位置的窗口，要给出每个窗口的最大值。</p>\n<p>这题的解法有很多，我们先来大概理下思路：</p>\n<p>1、暴力 O(n*k)</p>\n<p>2、堆 O(n*logk)</p>\n<p>3、双端队列 O(n)</p>\n<p>4、双数组（那个方法看着像这个，具体也不好形容） O(n)</p>\n<p>都说<code>Talk is cheap,show me the code.</code>，所以直接上代码。</p>\n<p><strong>暴力法</strong>代码还是比较简单的，但是有个致命的弱点是复杂度较高，直接会超时。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span>[] res = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[nums.length - k + <span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length - k + <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> max = Integer.MIN_VALUE;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i; j &lt; i + k; j++) &#123;</span><br><span class=\"line\">        max = Math.max(max, nums[j]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    res[index++] = max;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> res;</span><br></pre></td></tr></table></figure>\n\n<p> <strong>堆</strong>实现在各大语言里都有现成的封装类，java里面是PriorityQueue.思路就是维护一个k大小的大顶堆，然后堆里存的是下标而不是nums[i]，因为你可以用下标快速找到nums[i]，但是nums[i]找下标会很麻烦，然后利用index&lt;=i-k这个条件，将超过窗口的元素拿出去,最后一次拿堆顶元素就是窗口最大值了。</p>\n<p>这里实现有两种，一个是先初始化第一个窗口堆，然后循环后面，另一个是直接循环所有的，第一个适合新手，熟了之后推荐第二种，优雅点：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 法一</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> n = nums.length;</span><br><span class=\"line\">PriorityQueue&lt;Integer&gt; pq = <span class=\"keyword\">new</span> PriorityQueue&lt;&gt;((o1, o2) -&gt; (nums[o2] - nums[o1]));</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; k; ++i) &#123;</span><br><span class=\"line\">    pq.offer(i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">int</span>[] ans = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n - k + <span class=\"number\">1</span>];</span><br><span class=\"line\">ans[<span class=\"number\">0</span>] = nums[pq.peek()];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = k; i &lt; n; ++i) &#123;</span><br><span class=\"line\">    pq.offer(i);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (pq.peek() &lt;= i - k) &#123;</span><br><span class=\"line\">        pq.poll();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ans[i - k + <span class=\"number\">1</span>] = nums[pq.peek()];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> ans;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 法二</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (nums.length == <span class=\"number\">0</span> || k == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">PriorityQueue&lt;Integer&gt; pq = <span class=\"keyword\">new</span> PriorityQueue&lt;&gt;((o1, o2) -&gt; (nums[o2] - nums[o1]));</span><br><span class=\"line\"><span class=\"keyword\">int</span>[] ans = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[nums.length - k + <span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; ++i) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!pq.isEmpty() &amp;&amp; pq.peek() &lt;= i - k) &#123;</span><br><span class=\"line\">        pq.poll();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    pq.offer(i);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i - k + <span class=\"number\">1</span> &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        ans[i - k + <span class=\"number\">1</span>] = nums[pq.peek()];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> ans;</span><br></pre></td></tr></table></figure>\n\n<p><strong>双端队列</strong>实现是利用deque可以双向出入的特性，保证deque里面左边元素始终最大的，这样最大元素只要每次拿deque.peekFirst()即可。利用deque.peekFirst() == i - k这个调教保证超出窗口的元素出去。每次入队的时候验证nums[i]和队尾元素大小，如果比队尾元素大，则将队尾元素取出。然后将i加入队列中。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 双端队列</span></span><br><span class=\"line\"><span class=\"comment\">         * 时间复杂度O(n+k)，空间复杂度O(n)</span></span><br><span class=\"line\"><span class=\"comment\">         * 始终保持双端队列头一个元素为最大值</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums == <span class=\"keyword\">null</span> || nums.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> nums;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] res = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[nums.length - k + <span class=\"number\">1</span>];</span><br><span class=\"line\">        Deque&lt;Integer&gt; deque = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//窗口已经占满了</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!deque.isEmpty() &amp;&amp; deque.peekFirst() == i - k) &#123;</span><br><span class=\"line\"><span class=\"comment\">//            if (!deque.isEmpty() &amp;&amp; deque.peekFirst() &lt; i - k + 1) &#123;</span></span><br><span class=\"line\">                deque.pollFirst();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//始终保持队列按从大到小排列,且会一直移除新加元素小的元素，如果</span></span><br><span class=\"line\">            <span class=\"comment\">//nums[i]大于队列所有值，会移除队列所有值</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (!deque.isEmpty() &amp;&amp; nums[deque.peekLast()] &lt; nums[i]) &#123;</span><br><span class=\"line\">                deque.pollLast();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            deque.offerLast(i);</span><br><span class=\"line\">            <span class=\"comment\">//当窗口满了k个元素，将其一个个放入res[]数组中</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i &gt;= k - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//第一个元素始终是最大的元素</span></span><br><span class=\"line\">                res[i + <span class=\"number\">1</span> - k] = nums[deque.peekFirst()];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br></pre></td></tr></table></figure>\n\n<p><strong>双端队列</strong>的代码其实还可以优化，上面的代码是用的系统自带的Deque，我前面日记里面说过系统库函数一般会考虑很多实际工业上情况和很多边界条件，因此性能不会很好，所以我们可以进一步自己实现一个双端队列，从而提高运行时间。</p>\n<p>给个参考数据，<strong>我用系统自带的Deque，也就是上面代码，运行时间是39ms,击败50.38%的java用户；而我用自己实现的Deque，也就是下面的代码，运行时间是29ms,击败了96.29%的java用户。</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 数组实现双端队列</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (nums.length == <span class=\"number\">0</span> || k == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">int</span> count = k + <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span>[] deque = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[count];</span><br><span class=\"line\"><span class=\"keyword\">int</span> head = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> tail = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span>[] res = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[nums.length - k + <span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tail != head &amp;&amp; deque[head%count] == i - k) &#123;</span><br><span class=\"line\">        head = (head + <span class=\"number\">1</span>) % count;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (tail != head &amp;&amp; nums[deque[(tail - <span class=\"number\">1</span> + count) % count]] &lt; nums[i]) &#123;</span><br><span class=\"line\">        tail = (tail - <span class=\"number\">1</span> + count) % count;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    deque[tail] = i;</span><br><span class=\"line\">    tail = (tail + <span class=\"number\">1</span>) % count;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i - k + <span class=\"number\">1</span> &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        res[i - k + <span class=\"number\">1</span>] = nums[deque[head % count]];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> res;</span><br></pre></td></tr></table></figure>\n\n<p>这个数组实现的Deque代码其实就是前面日记的循环双端队列拿过来稍微改了下，我就不做过多解释了，不太清楚的可以去看看前面的设计循环双端对列的文章。</p>\n<h4 id=\"双数组方法是所有方法里面最高效的，运行时间是13ms，比数组的双端队列少了一半多的时间。\"><a href=\"#双数组方法是所有方法里面最高效的，运行时间是13ms，比数组的双端队列少了一半多的时间。\" class=\"headerlink\" title=\"双数组方法是所有方法里面最高效的，运行时间是13ms，比数组的双端队列少了一半多的时间。\"></a><strong>双数组方法</strong>是所有方法里面最高效的，运行时间是13ms，比数组的双端队列少了一半多的时间。</h4><p>但是怎么说这个方法不具普遍性，感觉有点取巧，正统方法还是双端队列优雅点。</p>\n<p>思路是： 将数组按k个一组分成多段，最后一段可能不足k个，<br>1、分别从左边开始找到最大值和右边开始找到最大值。<br>2、比较左右最大值，大的那个就是该位置滑动窗口的最大值。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span>[] max_left = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[nums.length];</span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span>[] max_right = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[nums.length];</span><br><span class=\"line\"></span><br><span class=\"line\">max_left[<span class=\"number\">0</span>] = nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">max_right[nums.length - <span class=\"number\">1</span>] = nums[nums.length - <span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">    max_left[i] = (i % k == <span class=\"number\">0</span>) ? nums[i] : Math.max(max_left[i - <span class=\"number\">1</span>], nums[i]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> j = nums.length - i - <span class=\"number\">1</span>;</span><br><span class=\"line\">    max_right[j] = (j % k == <span class=\"number\">0</span>) ? nums[j] : Math.max(max_right[j + <span class=\"number\">1</span>], nums[j]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span>[] sliding_max = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[nums.length - k + <span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, j = <span class=\"number\">0</span>; i + k &lt;= nums.length; i++) &#123;</span><br><span class=\"line\">    sliding_max[j++] = Math.max(max_right[i], max_left[i + k - <span class=\"number\">1</span>]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> sliding_max;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h4><p>这些方法里面效率最高的是最后这种双数组的方法，但是实际场景感觉不太好用，这个题的考察点还是堆和双端队列。队列这种数据结构在实际开发场景中运用还是很多的。所以还是要多熟悉下。</p>"},{"title":"LeetCode刷题日记-盛最多水的容器","date":"2021-05-06T15:38:28.000Z","cagetories":"数组","_content":"\n节后第一天，鉴于五一五天都没做过题，有点遗忘了，今天来看一道简单点的题，练下手。\n\nLeetCode第11题：\n\n```java\n给你 n 个非负整数 a1，a2，...，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0) 。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。\n\n输入：[1,8,6,2,5,4,8,3,7]\n输出：49 \n解释：图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。\n\n```\n\n<!-- more -->\n\n#### 暴力法\n\n一般看完这个题优先的思路是暴力法，两层循环嵌套，然后得到最大值，时间复杂度为O(n^2)，由于官方已经加大了测试用例的规模，暴力法会超时，已经过不了了。\n\n那我们想想其他的方法吧，在数组和链表两个比较简单的线性表求面积的时候，经常会用到一种思想，**双指针**，这个后面遇到这类题的时候，没思路可以往这方面想。\n\n#### 双指针\n\n什么叫双指针呢，顾名思义，就是用两个指针(内存里的指针是记录引用地址的内存空间，这个地址会指向引用的实际存储位置)，记录左右边界位置，然后按照一定条件移动双指针，达到求最大面积的目的。\n\n以这个题为例，我们要求面积最大值，就需要宽和高足够大就可以，但是我们需要知道柱子的面积最大值，就需要移动左右指针，该怎么定义移动规则呢？\n\n其实很简单，我们假设左指针`left=0`，右指针`right=a.length-1;`，这时候有`V=（right-left）*Math.min(a[left],a[right])`，然后我们这时候想要得到比这个面积大的区域，首先left和right一定会往中间走，宽一定是会变小的，要使面积变大，就一定要高竟可能大，因此我们舍弃高较小的那根柱子，然后不断重复上述过程，知道left==right。\n\n我们不难发现，利用双指针法，成功将时间复杂度由O(n^2)降为了O(n).**所以可以知道双指针法能减少一层遍历。**\n\n思路想明白之后代码实现就很简单了，下面是其中一种实现：\n\n```java\n        int max = 0;\n        for (int left = 0, right = a.length - 1; left < right; ) {\n            int v = (right - left) * (a[left] < a[right] ? a[left++] : a[right--]);\n            max = max < v ? v : max;\n        }\n\n        return max;\n```\n\n\n\n#### 写在最后\n\n数组相关的题大多比较简单，很多都是一些固定的模式，一开始可能觉得很神奇，这东西还能这么玩？但是摸清楚套路之后感觉也就那样，所以数组相关的题没啥注意的，多练就行。","source":"_posts/LeetCode刷题日记-盛最多水的容器.md","raw":"---\ntitle: LeetCode刷题日记-盛最多水的容器\ndate: 2021-05-06 23:38:28\ntags: ['数组','双指针','LeetCode','日记']\ncagetories: '数组'\n---\n\n节后第一天，鉴于五一五天都没做过题，有点遗忘了，今天来看一道简单点的题，练下手。\n\nLeetCode第11题：\n\n```java\n给你 n 个非负整数 a1，a2，...，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0) 。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。\n\n输入：[1,8,6,2,5,4,8,3,7]\n输出：49 \n解释：图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。\n\n```\n\n<!-- more -->\n\n#### 暴力法\n\n一般看完这个题优先的思路是暴力法，两层循环嵌套，然后得到最大值，时间复杂度为O(n^2)，由于官方已经加大了测试用例的规模，暴力法会超时，已经过不了了。\n\n那我们想想其他的方法吧，在数组和链表两个比较简单的线性表求面积的时候，经常会用到一种思想，**双指针**，这个后面遇到这类题的时候，没思路可以往这方面想。\n\n#### 双指针\n\n什么叫双指针呢，顾名思义，就是用两个指针(内存里的指针是记录引用地址的内存空间，这个地址会指向引用的实际存储位置)，记录左右边界位置，然后按照一定条件移动双指针，达到求最大面积的目的。\n\n以这个题为例，我们要求面积最大值，就需要宽和高足够大就可以，但是我们需要知道柱子的面积最大值，就需要移动左右指针，该怎么定义移动规则呢？\n\n其实很简单，我们假设左指针`left=0`，右指针`right=a.length-1;`，这时候有`V=（right-left）*Math.min(a[left],a[right])`，然后我们这时候想要得到比这个面积大的区域，首先left和right一定会往中间走，宽一定是会变小的，要使面积变大，就一定要高竟可能大，因此我们舍弃高较小的那根柱子，然后不断重复上述过程，知道left==right。\n\n我们不难发现，利用双指针法，成功将时间复杂度由O(n^2)降为了O(n).**所以可以知道双指针法能减少一层遍历。**\n\n思路想明白之后代码实现就很简单了，下面是其中一种实现：\n\n```java\n        int max = 0;\n        for (int left = 0, right = a.length - 1; left < right; ) {\n            int v = (right - left) * (a[left] < a[right] ? a[left++] : a[right--]);\n            max = max < v ? v : max;\n        }\n\n        return max;\n```\n\n\n\n#### 写在最后\n\n数组相关的题大多比较简单，很多都是一些固定的模式，一开始可能觉得很神奇，这东西还能这么玩？但是摸清楚套路之后感觉也就那样，所以数组相关的题没啥注意的，多练就行。","slug":"LeetCode刷题日记-盛最多水的容器","published":1,"updated":"2021-05-06T16:04:09.386Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckod3078r000xnwtb9s21gdcz","content":"<p>节后第一天，鉴于五一五天都没做过题，有点遗忘了，今天来看一道简单点的题，练下手。</p>\n<p>LeetCode第11题：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">给你 n 个非负整数 a1，a2，...，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, <span class=\"number\">0</span>) 。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。</span><br><span class=\"line\"></span><br><span class=\"line\">输入：[<span class=\"number\">1</span>,<span class=\"number\">8</span>,<span class=\"number\">6</span>,<span class=\"number\">2</span>,<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">8</span>,<span class=\"number\">3</span>,<span class=\"number\">7</span>]</span><br><span class=\"line\">输出：<span class=\"number\">49</span> </span><br><span class=\"line\">解释：图中垂直线代表输入数组 [<span class=\"number\">1</span>,<span class=\"number\">8</span>,<span class=\"number\">6</span>,<span class=\"number\">2</span>,<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">8</span>,<span class=\"number\">3</span>,<span class=\"number\">7</span>]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 <span class=\"number\">49</span>。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<h4 id=\"暴力法\"><a href=\"#暴力法\" class=\"headerlink\" title=\"暴力法\"></a>暴力法</h4><p>一般看完这个题优先的思路是暴力法，两层循环嵌套，然后得到最大值，时间复杂度为O(n^2)，由于官方已经加大了测试用例的规模，暴力法会超时，已经过不了了。</p>\n<p>那我们想想其他的方法吧，在数组和链表两个比较简单的线性表求面积的时候，经常会用到一种思想，<strong>双指针</strong>，这个后面遇到这类题的时候，没思路可以往这方面想。</p>\n<h4 id=\"双指针\"><a href=\"#双指针\" class=\"headerlink\" title=\"双指针\"></a>双指针</h4><p>什么叫双指针呢，顾名思义，就是用两个指针(内存里的指针是记录引用地址的内存空间，这个地址会指向引用的实际存储位置)，记录左右边界位置，然后按照一定条件移动双指针，达到求最大面积的目的。</p>\n<p>以这个题为例，我们要求面积最大值，就需要宽和高足够大就可以，但是我们需要知道柱子的面积最大值，就需要移动左右指针，该怎么定义移动规则呢？</p>\n<p>其实很简单，我们假设左指针<code>left=0</code>，右指针<code>right=a.length-1;</code>，这时候有<code>V=（right-left）*Math.min(a[left],a[right])</code>，然后我们这时候想要得到比这个面积大的区域，首先left和right一定会往中间走，宽一定是会变小的，要使面积变大，就一定要高竟可能大，因此我们舍弃高较小的那根柱子，然后不断重复上述过程，知道left==right。</p>\n<p>我们不难发现，利用双指针法，成功将时间复杂度由O(n^2)降为了O(n).<strong>所以可以知道双指针法能减少一层遍历。</strong></p>\n<p>思路想明白之后代码实现就很简单了，下面是其中一种实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> max = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> left = <span class=\"number\">0</span>, right = a.length - <span class=\"number\">1</span>; left &lt; right; ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> v = (right - left) * (a[left] &lt; a[right] ? a[left++] : a[right--]);</span><br><span class=\"line\">    max = max &lt; v ? v : max;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> max;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h4><p>数组相关的题大多比较简单，很多都是一些固定的模式，一开始可能觉得很神奇，这东西还能这么玩？但是摸清楚套路之后感觉也就那样，所以数组相关的题没啥注意的，多练就行。</p>\n","site":{"data":{}},"excerpt":"<p>节后第一天，鉴于五一五天都没做过题，有点遗忘了，今天来看一道简单点的题，练下手。</p>\n<p>LeetCode第11题：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">给你 n 个非负整数 a1，a2，...，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, <span class=\"number\">0</span>) 。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。</span><br><span class=\"line\"></span><br><span class=\"line\">输入：[<span class=\"number\">1</span>,<span class=\"number\">8</span>,<span class=\"number\">6</span>,<span class=\"number\">2</span>,<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">8</span>,<span class=\"number\">3</span>,<span class=\"number\">7</span>]</span><br><span class=\"line\">输出：<span class=\"number\">49</span> </span><br><span class=\"line\">解释：图中垂直线代表输入数组 [<span class=\"number\">1</span>,<span class=\"number\">8</span>,<span class=\"number\">6</span>,<span class=\"number\">2</span>,<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">8</span>,<span class=\"number\">3</span>,<span class=\"number\">7</span>]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 <span class=\"number\">49</span>。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","more":"<h4 id=\"暴力法\"><a href=\"#暴力法\" class=\"headerlink\" title=\"暴力法\"></a>暴力法</h4><p>一般看完这个题优先的思路是暴力法，两层循环嵌套，然后得到最大值，时间复杂度为O(n^2)，由于官方已经加大了测试用例的规模，暴力法会超时，已经过不了了。</p>\n<p>那我们想想其他的方法吧，在数组和链表两个比较简单的线性表求面积的时候，经常会用到一种思想，<strong>双指针</strong>，这个后面遇到这类题的时候，没思路可以往这方面想。</p>\n<h4 id=\"双指针\"><a href=\"#双指针\" class=\"headerlink\" title=\"双指针\"></a>双指针</h4><p>什么叫双指针呢，顾名思义，就是用两个指针(内存里的指针是记录引用地址的内存空间，这个地址会指向引用的实际存储位置)，记录左右边界位置，然后按照一定条件移动双指针，达到求最大面积的目的。</p>\n<p>以这个题为例，我们要求面积最大值，就需要宽和高足够大就可以，但是我们需要知道柱子的面积最大值，就需要移动左右指针，该怎么定义移动规则呢？</p>\n<p>其实很简单，我们假设左指针<code>left=0</code>，右指针<code>right=a.length-1;</code>，这时候有<code>V=（right-left）*Math.min(a[left],a[right])</code>，然后我们这时候想要得到比这个面积大的区域，首先left和right一定会往中间走，宽一定是会变小的，要使面积变大，就一定要高竟可能大，因此我们舍弃高较小的那根柱子，然后不断重复上述过程，知道left==right。</p>\n<p>我们不难发现，利用双指针法，成功将时间复杂度由O(n^2)降为了O(n).<strong>所以可以知道双指针法能减少一层遍历。</strong></p>\n<p>思路想明白之后代码实现就很简单了，下面是其中一种实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> max = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> left = <span class=\"number\">0</span>, right = a.length - <span class=\"number\">1</span>; left &lt; right; ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> v = (right - left) * (a[left] &lt; a[right] ? a[left++] : a[right--]);</span><br><span class=\"line\">    max = max &lt; v ? v : max;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> max;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h4><p>数组相关的题大多比较简单，很多都是一些固定的模式，一开始可能觉得很神奇，这东西还能这么玩？但是摸清楚套路之后感觉也就那样，所以数组相关的题没啥注意的，多练就行。</p>"},{"title":"LeetCode刷题日记-设计循环双端队列","date":"2021-04-20T14:22:37.000Z","_content":"\n这篇文章是对LeetCode641题设计循环双端队列思路进行记录。(PS:后续应该还会在写一篇，等我把双向链表实现搞清楚了，一个指针还能理清，两个指针pre和next看着就有点晕了，等我消化下。)\n\n众所周知栈和队列都是限制性的数据结构，在某些业务场景经常用到，而栈和队列其实用两种基本的数据结构数组和链表都能实现的。今天我们先来看看如何用数组设计循环双端队列。\n\n<!-- more -->\n\n```java\n      class MyCircularDeque {\n\n          private int[] items;\n          private int count;\n          private int head;\n          private int tail;\n\n          public MyCircularDeque(int k) {\n              this.count = k+1;\n              this.items = new int[count];\n              this.head = 0;\n              this.tail = 0;\n          }\n\n          public boolean insertFront(int value) {\n              if (isFull()) {\n                  return false;\n              }\n              head = (head - 1 + count) % count;\n              items[head] = value;\n              return true;\n          }\n\n          public boolean insertLast(int value) {\n              if (isFull()) {\n                  return false;\n              }\n              items[tail] = value;\n              tail = (tail + 1) % count;\n              return true;\n          }\n\n          public boolean deleteFront() {\n              if (isEmpty()) {\n                  return false;\n              }\n              head = (head + 1) % count;\n              return true;\n          }\n\n          public boolean deleteLast() {\n              if (isEmpty()) {\n                  return false;\n              }\n              tail = (tail - 1 + count) % count;\n              return true;\n          }\n\n          public int getFront() {\n              if (isEmpty()) {\n                  return -1;\n              }\n              return items[head];\n          }\n\n          public int getRear() {\n              if (isEmpty()) {\n                  return -1;\n              }\n              return items[(tail - 1 + count) % count];\n          }\n\n          public boolean isEmpty() {\n              return head == tail;\n          }\n\n          public boolean isFull() {\n              return (tail + 1) % count == head;\n          }\n      }\n```\n\n首先循环队列你可以想象成一个环状，首尾是相连的，再来它的元素位置是随插入删除一直移动的，因此效率其实是偏低的，插入元素会涉及数据迁移，所以工业上的队列一般是用链表实现的。\n\n然后解释下几个成员变量：\n\n- items[],实际用来存储数据的数组\n- count,整个数组的具体大小\n- head，头指针所在的下标位置\n- tail,尾指针所在的下标位置。**这里需要注意的一点是tail这个位置实际上是不会存储数据的，最后一个元素的下标是(tail-1+count)%count所以会浪费一个位置。**\n\n设计这个我们首先考虑**构造函数**，因为有k个元素，而tail会多占一个位置，因此实际需要k+1的空间，head和tail初始值都是0.\n\n接下来先别看插入删除这些，看两个基本函数，isEmpty()和isFull()，先把这两个定义清楚后在写其他函数会简单很多。\n\nisEmpty()的条件其实很容易想到，就是`head==tail;`.\n\nisFull()其实不太好想，满的条件就是tail和head相邻，只差一个元素，用代码表示就是 `(tail+1)%count==head;`.这里模上count的原因是因为tail+1可能超过count，这时候head其实就是在0的位置。**循环队列的下标计算经常会用到%count的操作，这个需要记住。**\n\n这两个基本实现了在实现其他的就简单很多了。\n\ninsertFront（value）实现就是先判断队列是否满了，如果满了就返回false，否则将head-1存储的值设置成value。**需要考虑当head=0的时候head-1是负数，所以需要head-1+count去将其变成正数在模上count。**\n\ninsertLast（value）思路和上面差不多，你可以自己想一下。\n\ndeleteFront ()则是首先判断是否为空队列，为空直接返回false，否则将head+1，当然，为防止越界会用 `(head+1)%count`，**这里实际上不需要在将items[head]=null，原因是我们访问数组元素都是通过head和tail，当head和tail访问不到那其实元素是什么都无所谓。**你可能会说在插入的时候会不会产生影响，答案是不会，因为在插入的时候都伴随赋值操作，以前内存里什么值根本不影响。\n\ndeleteLast（）思路同上，然后在下标进行-1的时候都需要考虑越界，所以需要(tail-1+count)%count。\n\ngetFront() 判断是否为空队列，为空直接返回-1，否则直接返回Items[head]即可。\n\ngetRear()   判断是否为空队列，为空直接返回-1，和前面介绍的一样，tail是站位的，实际最后一个元素是在tail-1的位置，然后考虑越界，所以最后结果就是items[(tail-1+count)%count].\n\n#### 写在最后\n\n数组实现会相比链表实现低效很多，因为数组在插入和删除会涉及后面数据的迁移，比较耗时。而链表实现则会快很多。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/LeetCode刷题日记-设计循环双端队列.md","raw":"---\ntitle: LeetCode刷题日记-设计循环双端队列\ndate: 2021-04-20 22:22:37\ntags: ['LeetCode','日记','队列','双端队列','数组']\ncategories: '队列'\n---\n\n这篇文章是对LeetCode641题设计循环双端队列思路进行记录。(PS:后续应该还会在写一篇，等我把双向链表实现搞清楚了，一个指针还能理清，两个指针pre和next看着就有点晕了，等我消化下。)\n\n众所周知栈和队列都是限制性的数据结构，在某些业务场景经常用到，而栈和队列其实用两种基本的数据结构数组和链表都能实现的。今天我们先来看看如何用数组设计循环双端队列。\n\n<!-- more -->\n\n```java\n      class MyCircularDeque {\n\n          private int[] items;\n          private int count;\n          private int head;\n          private int tail;\n\n          public MyCircularDeque(int k) {\n              this.count = k+1;\n              this.items = new int[count];\n              this.head = 0;\n              this.tail = 0;\n          }\n\n          public boolean insertFront(int value) {\n              if (isFull()) {\n                  return false;\n              }\n              head = (head - 1 + count) % count;\n              items[head] = value;\n              return true;\n          }\n\n          public boolean insertLast(int value) {\n              if (isFull()) {\n                  return false;\n              }\n              items[tail] = value;\n              tail = (tail + 1) % count;\n              return true;\n          }\n\n          public boolean deleteFront() {\n              if (isEmpty()) {\n                  return false;\n              }\n              head = (head + 1) % count;\n              return true;\n          }\n\n          public boolean deleteLast() {\n              if (isEmpty()) {\n                  return false;\n              }\n              tail = (tail - 1 + count) % count;\n              return true;\n          }\n\n          public int getFront() {\n              if (isEmpty()) {\n                  return -1;\n              }\n              return items[head];\n          }\n\n          public int getRear() {\n              if (isEmpty()) {\n                  return -1;\n              }\n              return items[(tail - 1 + count) % count];\n          }\n\n          public boolean isEmpty() {\n              return head == tail;\n          }\n\n          public boolean isFull() {\n              return (tail + 1) % count == head;\n          }\n      }\n```\n\n首先循环队列你可以想象成一个环状，首尾是相连的，再来它的元素位置是随插入删除一直移动的，因此效率其实是偏低的，插入元素会涉及数据迁移，所以工业上的队列一般是用链表实现的。\n\n然后解释下几个成员变量：\n\n- items[],实际用来存储数据的数组\n- count,整个数组的具体大小\n- head，头指针所在的下标位置\n- tail,尾指针所在的下标位置。**这里需要注意的一点是tail这个位置实际上是不会存储数据的，最后一个元素的下标是(tail-1+count)%count所以会浪费一个位置。**\n\n设计这个我们首先考虑**构造函数**，因为有k个元素，而tail会多占一个位置，因此实际需要k+1的空间，head和tail初始值都是0.\n\n接下来先别看插入删除这些，看两个基本函数，isEmpty()和isFull()，先把这两个定义清楚后在写其他函数会简单很多。\n\nisEmpty()的条件其实很容易想到，就是`head==tail;`.\n\nisFull()其实不太好想，满的条件就是tail和head相邻，只差一个元素，用代码表示就是 `(tail+1)%count==head;`.这里模上count的原因是因为tail+1可能超过count，这时候head其实就是在0的位置。**循环队列的下标计算经常会用到%count的操作，这个需要记住。**\n\n这两个基本实现了在实现其他的就简单很多了。\n\ninsertFront（value）实现就是先判断队列是否满了，如果满了就返回false，否则将head-1存储的值设置成value。**需要考虑当head=0的时候head-1是负数，所以需要head-1+count去将其变成正数在模上count。**\n\ninsertLast（value）思路和上面差不多，你可以自己想一下。\n\ndeleteFront ()则是首先判断是否为空队列，为空直接返回false，否则将head+1，当然，为防止越界会用 `(head+1)%count`，**这里实际上不需要在将items[head]=null，原因是我们访问数组元素都是通过head和tail，当head和tail访问不到那其实元素是什么都无所谓。**你可能会说在插入的时候会不会产生影响，答案是不会，因为在插入的时候都伴随赋值操作，以前内存里什么值根本不影响。\n\ndeleteLast（）思路同上，然后在下标进行-1的时候都需要考虑越界，所以需要(tail-1+count)%count。\n\ngetFront() 判断是否为空队列，为空直接返回-1，否则直接返回Items[head]即可。\n\ngetRear()   判断是否为空队列，为空直接返回-1，和前面介绍的一样，tail是站位的，实际最后一个元素是在tail-1的位置，然后考虑越界，所以最后结果就是items[(tail-1+count)%count].\n\n#### 写在最后\n\n数组实现会相比链表实现低效很多，因为数组在插入和删除会涉及后面数据的迁移，比较耗时。而链表实现则会快很多。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"LeetCode刷题日记-设计循环双端队列","published":1,"updated":"2021-04-20T15:24:46.176Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckod3078s0010nwtb6jb25d86","content":"<p>这篇文章是对LeetCode641题设计循环双端队列思路进行记录。(PS:后续应该还会在写一篇，等我把双向链表实现搞清楚了，一个指针还能理清，两个指针pre和next看着就有点晕了，等我消化下。)</p>\n<p>众所周知栈和队列都是限制性的数据结构，在某些业务场景经常用到，而栈和队列其实用两种基本的数据结构数组和链表都能实现的。今天我们先来看看如何用数组设计循环双端队列。</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyCircularDeque</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] items;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> count;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> head;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> tail;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyCircularDeque</span><span class=\"params\">(<span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.count = k+<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.items = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[count];</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.head = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.tail = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">insertFront</span><span class=\"params\">(<span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isFull()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        head = (head - <span class=\"number\">1</span> + count) % count;</span><br><span class=\"line\">        items[head] = value;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">insertLast</span><span class=\"params\">(<span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isFull()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        items[tail] = value;</span><br><span class=\"line\">        tail = (tail + <span class=\"number\">1</span>) % count;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">deleteFront</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isEmpty()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        head = (head + <span class=\"number\">1</span>) % count;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">deleteLast</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isEmpty()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        tail = (tail - <span class=\"number\">1</span> + count) % count;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getFront</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isEmpty()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> items[head];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getRear</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isEmpty()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> items[(tail - <span class=\"number\">1</span> + count) % count];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> head == tail;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isFull</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (tail + <span class=\"number\">1</span>) % count == head;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>首先循环队列你可以想象成一个环状，首尾是相连的，再来它的元素位置是随插入删除一直移动的，因此效率其实是偏低的，插入元素会涉及数据迁移，所以工业上的队列一般是用链表实现的。</p>\n<p>然后解释下几个成员变量：</p>\n<ul>\n<li>items[],实际用来存储数据的数组</li>\n<li>count,整个数组的具体大小</li>\n<li>head，头指针所在的下标位置</li>\n<li>tail,尾指针所在的下标位置。<strong>这里需要注意的一点是tail这个位置实际上是不会存储数据的，最后一个元素的下标是(tail-1+count)%count所以会浪费一个位置。</strong></li>\n</ul>\n<p>设计这个我们首先考虑<strong>构造函数</strong>，因为有k个元素，而tail会多占一个位置，因此实际需要k+1的空间，head和tail初始值都是0.</p>\n<p>接下来先别看插入删除这些，看两个基本函数，isEmpty()和isFull()，先把这两个定义清楚后在写其他函数会简单很多。</p>\n<p>isEmpty()的条件其实很容易想到，就是<code>head==tail;</code>.</p>\n<p>isFull()其实不太好想，满的条件就是tail和head相邻，只差一个元素，用代码表示就是 <code>(tail+1)%count==head;</code>.这里模上count的原因是因为tail+1可能超过count，这时候head其实就是在0的位置。<strong>循环队列的下标计算经常会用到%count的操作，这个需要记住。</strong></p>\n<p>这两个基本实现了在实现其他的就简单很多了。</p>\n<p>insertFront（value）实现就是先判断队列是否满了，如果满了就返回false，否则将head-1存储的值设置成value。<strong>需要考虑当head=0的时候head-1是负数，所以需要head-1+count去将其变成正数在模上count。</strong></p>\n<p>insertLast（value）思路和上面差不多，你可以自己想一下。</p>\n<p>deleteFront ()则是首先判断是否为空队列，为空直接返回false，否则将head+1，当然，为防止越界会用 <code>(head+1)%count</code>，<strong>这里实际上不需要在将items[head]=null，原因是我们访问数组元素都是通过head和tail，当head和tail访问不到那其实元素是什么都无所谓。</strong>你可能会说在插入的时候会不会产生影响，答案是不会，因为在插入的时候都伴随赋值操作，以前内存里什么值根本不影响。</p>\n<p>deleteLast（）思路同上，然后在下标进行-1的时候都需要考虑越界，所以需要(tail-1+count)%count。</p>\n<p>getFront() 判断是否为空队列，为空直接返回-1，否则直接返回Items[head]即可。</p>\n<p>getRear()   判断是否为空队列，为空直接返回-1，和前面介绍的一样，tail是站位的，实际最后一个元素是在tail-1的位置，然后考虑越界，所以最后结果就是items[(tail-1+count)%count].</p>\n<h4 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h4><p>数组实现会相比链表实现低效很多，因为数组在插入和删除会涉及后面数据的迁移，比较耗时。而链表实现则会快很多。</p>\n","site":{"data":{}},"excerpt":"<p>这篇文章是对LeetCode641题设计循环双端队列思路进行记录。(PS:后续应该还会在写一篇，等我把双向链表实现搞清楚了，一个指针还能理清，两个指针pre和next看着就有点晕了，等我消化下。)</p>\n<p>众所周知栈和队列都是限制性的数据结构，在某些业务场景经常用到，而栈和队列其实用两种基本的数据结构数组和链表都能实现的。今天我们先来看看如何用数组设计循环双端队列。</p>","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyCircularDeque</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] items;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> count;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> head;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> tail;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyCircularDeque</span><span class=\"params\">(<span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.count = k+<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.items = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[count];</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.head = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.tail = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">insertFront</span><span class=\"params\">(<span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isFull()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        head = (head - <span class=\"number\">1</span> + count) % count;</span><br><span class=\"line\">        items[head] = value;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">insertLast</span><span class=\"params\">(<span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isFull()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        items[tail] = value;</span><br><span class=\"line\">        tail = (tail + <span class=\"number\">1</span>) % count;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">deleteFront</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isEmpty()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        head = (head + <span class=\"number\">1</span>) % count;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">deleteLast</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isEmpty()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        tail = (tail - <span class=\"number\">1</span> + count) % count;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getFront</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isEmpty()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> items[head];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getRear</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isEmpty()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> items[(tail - <span class=\"number\">1</span> + count) % count];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> head == tail;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isFull</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (tail + <span class=\"number\">1</span>) % count == head;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>首先循环队列你可以想象成一个环状，首尾是相连的，再来它的元素位置是随插入删除一直移动的，因此效率其实是偏低的，插入元素会涉及数据迁移，所以工业上的队列一般是用链表实现的。</p>\n<p>然后解释下几个成员变量：</p>\n<ul>\n<li>items[],实际用来存储数据的数组</li>\n<li>count,整个数组的具体大小</li>\n<li>head，头指针所在的下标位置</li>\n<li>tail,尾指针所在的下标位置。<strong>这里需要注意的一点是tail这个位置实际上是不会存储数据的，最后一个元素的下标是(tail-1+count)%count所以会浪费一个位置。</strong></li>\n</ul>\n<p>设计这个我们首先考虑<strong>构造函数</strong>，因为有k个元素，而tail会多占一个位置，因此实际需要k+1的空间，head和tail初始值都是0.</p>\n<p>接下来先别看插入删除这些，看两个基本函数，isEmpty()和isFull()，先把这两个定义清楚后在写其他函数会简单很多。</p>\n<p>isEmpty()的条件其实很容易想到，就是<code>head==tail;</code>.</p>\n<p>isFull()其实不太好想，满的条件就是tail和head相邻，只差一个元素，用代码表示就是 <code>(tail+1)%count==head;</code>.这里模上count的原因是因为tail+1可能超过count，这时候head其实就是在0的位置。<strong>循环队列的下标计算经常会用到%count的操作，这个需要记住。</strong></p>\n<p>这两个基本实现了在实现其他的就简单很多了。</p>\n<p>insertFront（value）实现就是先判断队列是否满了，如果满了就返回false，否则将head-1存储的值设置成value。<strong>需要考虑当head=0的时候head-1是负数，所以需要head-1+count去将其变成正数在模上count。</strong></p>\n<p>insertLast（value）思路和上面差不多，你可以自己想一下。</p>\n<p>deleteFront ()则是首先判断是否为空队列，为空直接返回false，否则将head+1，当然，为防止越界会用 <code>(head+1)%count</code>，<strong>这里实际上不需要在将items[head]=null，原因是我们访问数组元素都是通过head和tail，当head和tail访问不到那其实元素是什么都无所谓。</strong>你可能会说在插入的时候会不会产生影响，答案是不会，因为在插入的时候都伴随赋值操作，以前内存里什么值根本不影响。</p>\n<p>deleteLast（）思路同上，然后在下标进行-1的时候都需要考虑越界，所以需要(tail-1+count)%count。</p>\n<p>getFront() 判断是否为空队列，为空直接返回-1，否则直接返回Items[head]即可。</p>\n<p>getRear()   判断是否为空队列，为空直接返回-1，和前面介绍的一样，tail是站位的，实际最后一个元素是在tail-1的位置，然后考虑越界，所以最后结果就是items[(tail-1+count)%count].</p>\n<h4 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h4><p>数组实现会相比链表实现低效很多，因为数组在插入和删除会涉及后面数据的迁移，比较耗时。而链表实现则会快很多。</p>"}],"PostAsset":[{"_id":"source/_posts/LeetCode刷题日记-K个一组翻转链表/foreach.jpg","post":"ckod3078h0003nwtb0y16g6xj","slug":"foreach.jpg","modified":1,"renderable":1},{"_id":"source/_posts/LeetCode刷题日记-K个一组翻转链表/revcure.jpg","post":"ckod3078h0003nwtb0y16g6xj","slug":"revcure.jpg","modified":1,"renderable":1}],"PostCategory":[{"post_id":"ckod3078e0001nwtb3jid92n0","category_id":"ckod3078i0004nwtbfdrj0n6h","_id":"ckod3078l000bnwtbeh7vgp4t"},{"post_id":"ckod3078h0003nwtb0y16g6xj","category_id":"ckod3078l0008nwtbe3zv1nvz","_id":"ckod3078l000dnwtb2nb2f4nr"},{"post_id":"ckod3078q000wnwtb5f7tbjkj","category_id":"ckod3078r000ynwtb0sze88ac","_id":"ckod3078t0013nwtb1czkfuow"},{"post_id":"ckod3078s0010nwtb6jb25d86","category_id":"ckod3078r000ynwtb0sze88ac","_id":"ckod3078t0015nwtb15mmelpp"}],"PostTag":[{"post_id":"ckod3078e0001nwtb3jid92n0","tag_id":"ckod3078j0005nwtbgh5u9iyb","_id":"ckod3078l000anwtb1pv58fvh"},{"post_id":"ckod3078h0003nwtb0y16g6xj","tag_id":"ckod3078l0009nwtbg4juge9v","_id":"ckod3078m000gnwtbdumq25ej"},{"post_id":"ckod3078h0003nwtb0y16g6xj","tag_id":"ckod3078l000cnwtb9bh1ep0y","_id":"ckod3078m000hnwtbd0uj5g0x"},{"post_id":"ckod3078h0003nwtb0y16g6xj","tag_id":"ckod3078m000enwtbahneah54","_id":"ckod3078m000jnwtb3bcb6n4c"},{"post_id":"ckod3078j0006nwtb9t62784r","tag_id":"ckod3078m000fnwtb3j5pfk1p","_id":"ckod3078o000nnwtb3121hj4y"},{"post_id":"ckod3078j0006nwtb9t62784r","tag_id":"ckod3078m000inwtbhmb5bl7n","_id":"ckod3078o000onwtbgx5efnqo"},{"post_id":"ckod3078j0006nwtb9t62784r","tag_id":"ckod3078m000knwtb1joj7ieg","_id":"ckod3078o000qnwtb7jej7gvx"},{"post_id":"ckod3078j0006nwtb9t62784r","tag_id":"ckod3078m000lnwtb9e7zcxpq","_id":"ckod3078o000rnwtbcd2o2jfc"},{"post_id":"ckod3078k0007nwtb6ce9c266","tag_id":"ckod3078l0009nwtbg4juge9v","_id":"ckod3078p000tnwtb8lq86hoo"},{"post_id":"ckod3078k0007nwtb6ce9c266","tag_id":"ckod3078l000cnwtb9bh1ep0y","_id":"ckod3078p000unwtb0muw9jag"},{"post_id":"ckod3078k0007nwtb6ce9c266","tag_id":"ckod3078o000snwtb185x1oqb","_id":"ckod3078p000vnwtb1ox8fdmh"},{"post_id":"ckod3078q000wnwtb5f7tbjkj","tag_id":"ckod3078m000fnwtb3j5pfk1p","_id":"ckod3078t0017nwtbelrtehi9"},{"post_id":"ckod3078q000wnwtb5f7tbjkj","tag_id":"ckod3078r000znwtb04tk5l4x","_id":"ckod3078t0018nwtb673y001n"},{"post_id":"ckod3078q000wnwtb5f7tbjkj","tag_id":"ckod3078s0012nwtbaoftb5df","_id":"ckod3078u001anwtbbnn32e0h"},{"post_id":"ckod3078q000wnwtb5f7tbjkj","tag_id":"ckod3078l000cnwtb9bh1ep0y","_id":"ckod3078u001bnwtb9b4t7qjo"},{"post_id":"ckod3078q000wnwtb5f7tbjkj","tag_id":"ckod3078l0009nwtbg4juge9v","_id":"ckod3078u001dnwtbhrbqa3ib"},{"post_id":"ckod3078q000wnwtb5f7tbjkj","tag_id":"ckod3078t0014nwtb7hzw9n13","_id":"ckod3078u001enwtb3k2odzek"},{"post_id":"ckod3078r000xnwtb9s21gdcz","tag_id":"ckod3078t0014nwtb7hzw9n13","_id":"ckod3078u001gnwtb0gpe3vnw"},{"post_id":"ckod3078r000xnwtb9s21gdcz","tag_id":"ckod3078u0019nwtbc9qhgadn","_id":"ckod3078u001hnwtb8bbj0f88"},{"post_id":"ckod3078r000xnwtb9s21gdcz","tag_id":"ckod3078l0009nwtbg4juge9v","_id":"ckod3078v001jnwtb4y4e0z1e"},{"post_id":"ckod3078r000xnwtb9s21gdcz","tag_id":"ckod3078l000cnwtb9bh1ep0y","_id":"ckod3078v001knwtbe8rgdwla"},{"post_id":"ckod3078s0010nwtb6jb25d86","tag_id":"ckod3078l0009nwtbg4juge9v","_id":"ckod3078v001lnwtbhvxi2kks"},{"post_id":"ckod3078s0010nwtb6jb25d86","tag_id":"ckod3078l000cnwtb9bh1ep0y","_id":"ckod3078v001mnwtb77w08x1j"},{"post_id":"ckod3078s0010nwtb6jb25d86","tag_id":"ckod3078r000znwtb04tk5l4x","_id":"ckod3078v001nnwtb7hid6zec"},{"post_id":"ckod3078s0010nwtb6jb25d86","tag_id":"ckod3078s0012nwtbaoftb5df","_id":"ckod3078v001onwtbhzpaafj7"},{"post_id":"ckod3078s0010nwtb6jb25d86","tag_id":"ckod3078t0014nwtb7hzw9n13","_id":"ckod3078v001pnwtbe8bs3fcg"}],"Tag":[{"name":"B+树","_id":"ckod3078j0005nwtbgh5u9iyb"},{"name":"LeetCode","_id":"ckod3078l0009nwtbg4juge9v"},{"name":"日记","_id":"ckod3078l000cnwtb9bh1ep0y"},{"name":"链表","_id":"ckod3078m000enwtbahneah54"},{"name":"堆","_id":"ckod3078m000fnwtb3j5pfk1p"},{"name":"哈希表","_id":"ckod3078m000inwtbhmb5bl7n"},{"name":"排序","_id":"ckod3078m000knwtb1joj7ieg"},{"name":"桶","_id":"ckod3078m000lnwtb9e7zcxpq"},{"name":"栈","_id":"ckod3078o000snwtb185x1oqb"},{"name":"队列","_id":"ckod3078r000znwtb04tk5l4x"},{"name":"双端队列","_id":"ckod3078s0012nwtbaoftb5df"},{"name":"数组","_id":"ckod3078t0014nwtb7hzw9n13"},{"name":"双指针","_id":"ckod3078u0019nwtbc9qhgadn"}]}}